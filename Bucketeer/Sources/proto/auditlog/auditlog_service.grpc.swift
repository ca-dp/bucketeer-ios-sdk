//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: proto/auditlog/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Bucketeer_Auditlog_AuditLogServiceListAuditLogsCall: ClientCallUnary {}

fileprivate final class Bucketeer_Auditlog_AuditLogServiceListAuditLogsCallBase: ClientCallUnaryBase<Bucketeer_Auditlog_ListAuditLogsRequest, Bucketeer_Auditlog_ListAuditLogsResponse>, Bucketeer_Auditlog_AuditLogServiceListAuditLogsCall {
  override class var method: String { return "/bucketeer.auditlog.AuditLogService/ListAuditLogs" }
}

internal protocol Bucketeer_Auditlog_AuditLogServiceListAdminAuditLogsCall: ClientCallUnary {}

fileprivate final class Bucketeer_Auditlog_AuditLogServiceListAdminAuditLogsCallBase: ClientCallUnaryBase<Bucketeer_Auditlog_ListAdminAuditLogsRequest, Bucketeer_Auditlog_ListAdminAuditLogsResponse>, Bucketeer_Auditlog_AuditLogServiceListAdminAuditLogsCall {
  override class var method: String { return "/bucketeer.auditlog.AuditLogService/ListAdminAuditLogs" }
}

internal protocol Bucketeer_Auditlog_AuditLogServiceListFeatureHistoryCall: ClientCallUnary {}

fileprivate final class Bucketeer_Auditlog_AuditLogServiceListFeatureHistoryCallBase: ClientCallUnaryBase<Bucketeer_Auditlog_ListFeatureHistoryRequest, Bucketeer_Auditlog_ListFeatureHistoryResponse>, Bucketeer_Auditlog_AuditLogServiceListFeatureHistoryCall {
  override class var method: String { return "/bucketeer.auditlog.AuditLogService/ListFeatureHistory" }
}


/// Instantiate Bucketeer_Auditlog_AuditLogServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Bucketeer_Auditlog_AuditLogServiceService: ServiceClient {
  /// Synchronous. Unary.
  func listAuditLogs(_ request: Bucketeer_Auditlog_ListAuditLogsRequest, metadata customMetadata: Metadata) throws -> Bucketeer_Auditlog_ListAuditLogsResponse
  /// Asynchronous. Unary.
  @discardableResult
  func listAuditLogs(_ request: Bucketeer_Auditlog_ListAuditLogsRequest, metadata customMetadata: Metadata, completion: @escaping (Bucketeer_Auditlog_ListAuditLogsResponse?, CallResult) -> Void) throws -> Bucketeer_Auditlog_AuditLogServiceListAuditLogsCall

  /// Synchronous. Unary.
  func listAdminAuditLogs(_ request: Bucketeer_Auditlog_ListAdminAuditLogsRequest, metadata customMetadata: Metadata) throws -> Bucketeer_Auditlog_ListAdminAuditLogsResponse
  /// Asynchronous. Unary.
  @discardableResult
  func listAdminAuditLogs(_ request: Bucketeer_Auditlog_ListAdminAuditLogsRequest, metadata customMetadata: Metadata, completion: @escaping (Bucketeer_Auditlog_ListAdminAuditLogsResponse?, CallResult) -> Void) throws -> Bucketeer_Auditlog_AuditLogServiceListAdminAuditLogsCall

  /// Synchronous. Unary.
  func listFeatureHistory(_ request: Bucketeer_Auditlog_ListFeatureHistoryRequest, metadata customMetadata: Metadata) throws -> Bucketeer_Auditlog_ListFeatureHistoryResponse
  /// Asynchronous. Unary.
  @discardableResult
  func listFeatureHistory(_ request: Bucketeer_Auditlog_ListFeatureHistoryRequest, metadata customMetadata: Metadata, completion: @escaping (Bucketeer_Auditlog_ListFeatureHistoryResponse?, CallResult) -> Void) throws -> Bucketeer_Auditlog_AuditLogServiceListFeatureHistoryCall

}

internal extension Bucketeer_Auditlog_AuditLogServiceService {
  /// Synchronous. Unary.
  func listAuditLogs(_ request: Bucketeer_Auditlog_ListAuditLogsRequest) throws -> Bucketeer_Auditlog_ListAuditLogsResponse {
    return try self.listAuditLogs(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func listAuditLogs(_ request: Bucketeer_Auditlog_ListAuditLogsRequest, completion: @escaping (Bucketeer_Auditlog_ListAuditLogsResponse?, CallResult) -> Void) throws -> Bucketeer_Auditlog_AuditLogServiceListAuditLogsCall {
    return try self.listAuditLogs(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func listAdminAuditLogs(_ request: Bucketeer_Auditlog_ListAdminAuditLogsRequest) throws -> Bucketeer_Auditlog_ListAdminAuditLogsResponse {
    return try self.listAdminAuditLogs(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func listAdminAuditLogs(_ request: Bucketeer_Auditlog_ListAdminAuditLogsRequest, completion: @escaping (Bucketeer_Auditlog_ListAdminAuditLogsResponse?, CallResult) -> Void) throws -> Bucketeer_Auditlog_AuditLogServiceListAdminAuditLogsCall {
    return try self.listAdminAuditLogs(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func listFeatureHistory(_ request: Bucketeer_Auditlog_ListFeatureHistoryRequest) throws -> Bucketeer_Auditlog_ListFeatureHistoryResponse {
    return try self.listFeatureHistory(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func listFeatureHistory(_ request: Bucketeer_Auditlog_ListFeatureHistoryRequest, completion: @escaping (Bucketeer_Auditlog_ListFeatureHistoryResponse?, CallResult) -> Void) throws -> Bucketeer_Auditlog_AuditLogServiceListFeatureHistoryCall {
    return try self.listFeatureHistory(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Bucketeer_Auditlog_AuditLogServiceServiceClient: ServiceClientBase, Bucketeer_Auditlog_AuditLogServiceService {
  /// Synchronous. Unary.
  internal func listAuditLogs(_ request: Bucketeer_Auditlog_ListAuditLogsRequest, metadata customMetadata: Metadata) throws -> Bucketeer_Auditlog_ListAuditLogsResponse {
    return try Bucketeer_Auditlog_AuditLogServiceListAuditLogsCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func listAuditLogs(_ request: Bucketeer_Auditlog_ListAuditLogsRequest, metadata customMetadata: Metadata, completion: @escaping (Bucketeer_Auditlog_ListAuditLogsResponse?, CallResult) -> Void) throws -> Bucketeer_Auditlog_AuditLogServiceListAuditLogsCall {
    return try Bucketeer_Auditlog_AuditLogServiceListAuditLogsCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listAdminAuditLogs(_ request: Bucketeer_Auditlog_ListAdminAuditLogsRequest, metadata customMetadata: Metadata) throws -> Bucketeer_Auditlog_ListAdminAuditLogsResponse {
    return try Bucketeer_Auditlog_AuditLogServiceListAdminAuditLogsCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func listAdminAuditLogs(_ request: Bucketeer_Auditlog_ListAdminAuditLogsRequest, metadata customMetadata: Metadata, completion: @escaping (Bucketeer_Auditlog_ListAdminAuditLogsResponse?, CallResult) -> Void) throws -> Bucketeer_Auditlog_AuditLogServiceListAdminAuditLogsCall {
    return try Bucketeer_Auditlog_AuditLogServiceListAdminAuditLogsCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listFeatureHistory(_ request: Bucketeer_Auditlog_ListFeatureHistoryRequest, metadata customMetadata: Metadata) throws -> Bucketeer_Auditlog_ListFeatureHistoryResponse {
    return try Bucketeer_Auditlog_AuditLogServiceListFeatureHistoryCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func listFeatureHistory(_ request: Bucketeer_Auditlog_ListFeatureHistoryRequest, metadata customMetadata: Metadata, completion: @escaping (Bucketeer_Auditlog_ListFeatureHistoryResponse?, CallResult) -> Void) throws -> Bucketeer_Auditlog_AuditLogServiceListFeatureHistoryCall {
    return try Bucketeer_Auditlog_AuditLogServiceListFeatureHistoryCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Bucketeer_Auditlog_AuditLogServiceProvider: ServiceProvider {
  func listAuditLogs(request: Bucketeer_Auditlog_ListAuditLogsRequest, session: Bucketeer_Auditlog_AuditLogServiceListAuditLogsSession) throws -> Bucketeer_Auditlog_ListAuditLogsResponse
  func listAdminAuditLogs(request: Bucketeer_Auditlog_ListAdminAuditLogsRequest, session: Bucketeer_Auditlog_AuditLogServiceListAdminAuditLogsSession) throws -> Bucketeer_Auditlog_ListAdminAuditLogsResponse
  func listFeatureHistory(request: Bucketeer_Auditlog_ListFeatureHistoryRequest, session: Bucketeer_Auditlog_AuditLogServiceListFeatureHistorySession) throws -> Bucketeer_Auditlog_ListFeatureHistoryResponse
}

extension Bucketeer_Auditlog_AuditLogServiceProvider {
  internal var serviceName: String { return "bucketeer.auditlog.AuditLogService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/bucketeer.auditlog.AuditLogService/ListAuditLogs":
      return try Bucketeer_Auditlog_AuditLogServiceListAuditLogsSessionBase(
        handler: handler,
        providerBlock: { try self.listAuditLogs(request: $0, session: $1 as! Bucketeer_Auditlog_AuditLogServiceListAuditLogsSessionBase) })
          .run()
    case "/bucketeer.auditlog.AuditLogService/ListAdminAuditLogs":
      return try Bucketeer_Auditlog_AuditLogServiceListAdminAuditLogsSessionBase(
        handler: handler,
        providerBlock: { try self.listAdminAuditLogs(request: $0, session: $1 as! Bucketeer_Auditlog_AuditLogServiceListAdminAuditLogsSessionBase) })
          .run()
    case "/bucketeer.auditlog.AuditLogService/ListFeatureHistory":
      return try Bucketeer_Auditlog_AuditLogServiceListFeatureHistorySessionBase(
        handler: handler,
        providerBlock: { try self.listFeatureHistory(request: $0, session: $1 as! Bucketeer_Auditlog_AuditLogServiceListFeatureHistorySessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Bucketeer_Auditlog_AuditLogServiceListAuditLogsSession: ServerSessionUnary {}

fileprivate final class Bucketeer_Auditlog_AuditLogServiceListAuditLogsSessionBase: ServerSessionUnaryBase<Bucketeer_Auditlog_ListAuditLogsRequest, Bucketeer_Auditlog_ListAuditLogsResponse>, Bucketeer_Auditlog_AuditLogServiceListAuditLogsSession {}

internal protocol Bucketeer_Auditlog_AuditLogServiceListAdminAuditLogsSession: ServerSessionUnary {}

fileprivate final class Bucketeer_Auditlog_AuditLogServiceListAdminAuditLogsSessionBase: ServerSessionUnaryBase<Bucketeer_Auditlog_ListAdminAuditLogsRequest, Bucketeer_Auditlog_ListAdminAuditLogsResponse>, Bucketeer_Auditlog_AuditLogServiceListAdminAuditLogsSession {}

internal protocol Bucketeer_Auditlog_AuditLogServiceListFeatureHistorySession: ServerSessionUnary {}

fileprivate final class Bucketeer_Auditlog_AuditLogServiceListFeatureHistorySessionBase: ServerSessionUnaryBase<Bucketeer_Auditlog_ListFeatureHistoryRequest, Bucketeer_Auditlog_ListFeatureHistoryResponse>, Bucketeer_Auditlog_AuditLogServiceListFeatureHistorySession {}

