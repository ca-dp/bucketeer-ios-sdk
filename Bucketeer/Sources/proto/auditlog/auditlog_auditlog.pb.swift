// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/auditlog/auditlog.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Auditlog_AuditLog {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var timestamp: Int64 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  var entityType: Bucketeer_Event_Domain_Event.EntityType {
    get {return _storage._entityType}
    set {_uniqueStorage()._entityType = newValue}
  }

  var entityID: String {
    get {return _storage._entityID}
    set {_uniqueStorage()._entityID = newValue}
  }

  var type: Bucketeer_Event_Domain_Event.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var event: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._event ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._event = newValue}
  }
  /// Returns true if `event` has been explicitly set.
  var hasEvent: Bool {return _storage._event != nil}
  /// Clears the value of `event`. Subsequent reads from it will return its default value.
  mutating func clearEvent() {_uniqueStorage()._event = nil}

  var editor: Bucketeer_Event_Domain_Editor {
    get {return _storage._editor ?? Bucketeer_Event_Domain_Editor()}
    set {_uniqueStorage()._editor = newValue}
  }
  /// Returns true if `editor` has been explicitly set.
  var hasEditor: Bool {return _storage._editor != nil}
  /// Clears the value of `editor`. Subsequent reads from it will return its default value.
  mutating func clearEditor() {_uniqueStorage()._editor = nil}

  var options: Bucketeer_Event_Domain_Options {
    get {return _storage._options ?? Bucketeer_Event_Domain_Options()}
    set {_uniqueStorage()._options = newValue}
  }
  /// Returns true if `options` has been explicitly set.
  var hasOptions: Bool {return _storage._options != nil}
  /// Clears the value of `options`. Subsequent reads from it will return its default value.
  mutating func clearOptions() {_uniqueStorage()._options = nil}

  var localizedMessage: Bucketeer_Event_Domain_LocalizedMessage {
    get {return _storage._localizedMessage ?? Bucketeer_Event_Domain_LocalizedMessage()}
    set {_uniqueStorage()._localizedMessage = newValue}
  }
  /// Returns true if `localizedMessage` has been explicitly set.
  var hasLocalizedMessage: Bool {return _storage._localizedMessage != nil}
  /// Clears the value of `localizedMessage`. Subsequent reads from it will return its default value.
  mutating func clearLocalizedMessage() {_uniqueStorage()._localizedMessage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.auditlog"

extension Bucketeer_Auditlog_AuditLog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuditLog"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "timestamp"),
    3: .standard(proto: "entity_type"),
    4: .standard(proto: "entity_id"),
    5: .same(proto: "type"),
    6: .same(proto: "event"),
    7: .same(proto: "editor"),
    8: .same(proto: "options"),
    9: .standard(proto: "localized_message"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _timestamp: Int64 = 0
    var _entityType: Bucketeer_Event_Domain_Event.EntityType = .feature
    var _entityID: String = String()
    var _type: Bucketeer_Event_Domain_Event.TypeEnum = .unknown
    var _event: SwiftProtobuf.Google_Protobuf_Any? = nil
    var _editor: Bucketeer_Event_Domain_Editor? = nil
    var _options: Bucketeer_Event_Domain_Options? = nil
    var _localizedMessage: Bucketeer_Event_Domain_LocalizedMessage? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _timestamp = source._timestamp
      _entityType = source._entityType
      _entityID = source._entityID
      _type = source._type
      _event = source._event
      _editor = source._editor
      _options = source._options
      _localizedMessage = source._localizedMessage
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._timestamp)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._entityType)
        case 4: try decoder.decodeSingularStringField(value: &_storage._entityID)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._event)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._editor)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._options)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._localizedMessage)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if _storage._timestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timestamp, fieldNumber: 2)
      }
      if _storage._entityType != .feature {
        try visitor.visitSingularEnumField(value: _storage._entityType, fieldNumber: 3)
      }
      if !_storage._entityID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._entityID, fieldNumber: 4)
      }
      if _storage._type != .unknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 5)
      }
      if let v = _storage._event {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._editor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._options {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._localizedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Auditlog_AuditLog, rhs: Bucketeer_Auditlog_AuditLog) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._entityType != rhs_storage._entityType {return false}
        if _storage._entityID != rhs_storage._entityID {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._event != rhs_storage._event {return false}
        if _storage._editor != rhs_storage._editor {return false}
        if _storage._options != rhs_storage._options {return false}
        if _storage._localizedMessage != rhs_storage._localizedMessage {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
