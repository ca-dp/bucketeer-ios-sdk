// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/auditlog/auditlog.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Auditlog_AuditLog {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var timestamp: Int64 = 0

  var entityType: Bucketeer_Event_Domain_Event.EntityType = .feature

  var entityID: String = String()

  var type: Bucketeer_Event_Domain_Event.TypeEnum = .unknown

  var event: SwiftProtobuf.Google_Protobuf_Any {
    get {return _event ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_event = newValue}
  }
  /// Returns true if `event` has been explicitly set.
  var hasEvent: Bool {return self._event != nil}
  /// Clears the value of `event`. Subsequent reads from it will return its default value.
  mutating func clearEvent() {self._event = nil}

  var editor: Bucketeer_Event_Domain_Editor {
    get {return _editor ?? Bucketeer_Event_Domain_Editor()}
    set {_editor = newValue}
  }
  /// Returns true if `editor` has been explicitly set.
  var hasEditor: Bool {return self._editor != nil}
  /// Clears the value of `editor`. Subsequent reads from it will return its default value.
  mutating func clearEditor() {self._editor = nil}

  var options: Bucketeer_Event_Domain_Options {
    get {return _options ?? Bucketeer_Event_Domain_Options()}
    set {_options = newValue}
  }
  /// Returns true if `options` has been explicitly set.
  var hasOptions: Bool {return self._options != nil}
  /// Clears the value of `options`. Subsequent reads from it will return its default value.
  mutating func clearOptions() {self._options = nil}

  var localizedMessage: Bucketeer_Event_Domain_LocalizedMessage {
    get {return _localizedMessage ?? Bucketeer_Event_Domain_LocalizedMessage()}
    set {_localizedMessage = newValue}
  }
  /// Returns true if `localizedMessage` has been explicitly set.
  var hasLocalizedMessage: Bool {return self._localizedMessage != nil}
  /// Clears the value of `localizedMessage`. Subsequent reads from it will return its default value.
  mutating func clearLocalizedMessage() {self._localizedMessage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _event: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _editor: Bucketeer_Event_Domain_Editor? = nil
  fileprivate var _options: Bucketeer_Event_Domain_Options? = nil
  fileprivate var _localizedMessage: Bucketeer_Event_Domain_LocalizedMessage? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.auditlog"

extension Bucketeer_Auditlog_AuditLog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuditLog"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "timestamp"),
    3: .standard(proto: "entity_type"),
    4: .standard(proto: "entity_id"),
    5: .same(proto: "type"),
    6: .same(proto: "event"),
    7: .same(proto: "editor"),
    8: .same(proto: "options"),
    9: .standard(proto: "localized_message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      case 3: try decoder.decodeSingularEnumField(value: &self.entityType)
      case 4: try decoder.decodeSingularStringField(value: &self.entityID)
      case 5: try decoder.decodeSingularEnumField(value: &self.type)
      case 6: try decoder.decodeSingularMessageField(value: &self._event)
      case 7: try decoder.decodeSingularMessageField(value: &self._editor)
      case 8: try decoder.decodeSingularMessageField(value: &self._options)
      case 9: try decoder.decodeSingularMessageField(value: &self._localizedMessage)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 2)
    }
    if self.entityType != .feature {
      try visitor.visitSingularEnumField(value: self.entityType, fieldNumber: 3)
    }
    if !self.entityID.isEmpty {
      try visitor.visitSingularStringField(value: self.entityID, fieldNumber: 4)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 5)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._editor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._options {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._localizedMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Auditlog_AuditLog, rhs: Bucketeer_Auditlog_AuditLog) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.entityType != rhs.entityType {return false}
    if lhs.entityID != rhs.entityID {return false}
    if lhs.type != rhs.type {return false}
    if lhs._event != rhs._event {return false}
    if lhs._editor != rhs._editor {return false}
    if lhs._options != rhs._options {return false}
    if lhs._localizedMessage != rhs._localizedMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
