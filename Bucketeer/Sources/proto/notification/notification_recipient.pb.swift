// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/notification/recipient.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Notification_Recipient {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Bucketeer_Notification_Recipient.TypeEnum = .slackChannel

  var slackChannelRecipient: Bucketeer_Notification_SlackChannelRecipient {
    get {return _slackChannelRecipient ?? Bucketeer_Notification_SlackChannelRecipient()}
    set {_slackChannelRecipient = newValue}
  }
  /// Returns true if `slackChannelRecipient` has been explicitly set.
  var hasSlackChannelRecipient: Bool {return self._slackChannelRecipient != nil}
  /// Clears the value of `slackChannelRecipient`. Subsequent reads from it will return its default value.
  mutating func clearSlackChannelRecipient() {self._slackChannelRecipient = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case slackChannel // = 0
    case UNRECOGNIZED(Int)

    init() {
      self = .slackChannel
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .slackChannel
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .slackChannel: return 0
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _slackChannelRecipient: Bucketeer_Notification_SlackChannelRecipient? = nil
}

#if swift(>=4.2)

extension Bucketeer_Notification_Recipient.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bucketeer_Notification_Recipient.TypeEnum] = [
    .slackChannel,
  ]
}

#endif  // swift(>=4.2)

struct Bucketeer_Notification_SlackChannelRecipient {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var webhookURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.notification"

extension Bucketeer_Notification_Recipient: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Recipient"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "slack_channel_recipient"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeSingularMessageField(value: &self._slackChannelRecipient)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .slackChannel {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if let v = self._slackChannelRecipient {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Notification_Recipient, rhs: Bucketeer_Notification_Recipient) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs._slackChannelRecipient != rhs._slackChannelRecipient {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Notification_Recipient.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SlackChannel"),
  ]
}

extension Bucketeer_Notification_SlackChannelRecipient: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SlackChannelRecipient"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "webhook_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.webhookURL)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.webhookURL.isEmpty {
      try visitor.visitSingularStringField(value: self.webhookURL, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Notification_SlackChannelRecipient, rhs: Bucketeer_Notification_SlackChannelRecipient) -> Bool {
    if lhs.webhookURL != rhs.webhookURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
