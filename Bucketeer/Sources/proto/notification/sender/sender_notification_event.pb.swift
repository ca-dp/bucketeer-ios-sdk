// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/notification/sender/notification_event.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Notification_Sender_NotificationEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var environmentNamespace: String {
    get {return _storage._environmentNamespace}
    set {_uniqueStorage()._environmentNamespace = newValue}
  }

  var sourceType: Bucketeer_Notification_Subscription.SourceType {
    get {return _storage._sourceType}
    set {_uniqueStorage()._sourceType = newValue}
  }

  var notification: Bucketeer_Notification_Sender_Notification {
    get {return _storage._notification ?? Bucketeer_Notification_Sender_Notification()}
    set {_uniqueStorage()._notification = newValue}
  }
  /// Returns true if `notification` has been explicitly set.
  var hasNotification: Bool {return _storage._notification != nil}
  /// Clears the value of `notification`. Subsequent reads from it will return its default value.
  mutating func clearNotification() {_uniqueStorage()._notification = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.notification.sender"

extension Bucketeer_Notification_Sender_NotificationEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NotificationEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "environment_namespace"),
    3: .standard(proto: "source_type"),
    4: .same(proto: "notification"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _environmentNamespace: String = String()
    var _sourceType: Bucketeer_Notification_Subscription.SourceType = .domainEventFeature
    var _notification: Bucketeer_Notification_Sender_Notification? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _environmentNamespace = source._environmentNamespace
      _sourceType = source._sourceType
      _notification = source._notification
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._environmentNamespace)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._sourceType)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._notification)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._environmentNamespace.isEmpty {
        try visitor.visitSingularStringField(value: _storage._environmentNamespace, fieldNumber: 2)
      }
      if _storage._sourceType != .domainEventFeature {
        try visitor.visitSingularEnumField(value: _storage._sourceType, fieldNumber: 3)
      }
      if let v = _storage._notification {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Notification_Sender_NotificationEvent, rhs: Bucketeer_Notification_Sender_NotificationEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._environmentNamespace != rhs_storage._environmentNamespace {return false}
        if _storage._sourceType != rhs_storage._sourceType {return false}
        if _storage._notification != rhs_storage._notification {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
