// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/notification/sender/notification_event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Notification_Sender_NotificationEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var environmentNamespace: String = String()

  var sourceType: Bucketeer_Notification_Subscription.SourceType = .domainEventFeature

  var notification: Bucketeer_Notification_Sender_Notification {
    get {return _notification ?? Bucketeer_Notification_Sender_Notification()}
    set {_notification = newValue}
  }
  /// Returns true if `notification` has been explicitly set.
  var hasNotification: Bool {return self._notification != nil}
  /// Clears the value of `notification`. Subsequent reads from it will return its default value.
  mutating func clearNotification() {self._notification = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _notification: Bucketeer_Notification_Sender_Notification? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.notification.sender"

extension Bucketeer_Notification_Sender_NotificationEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NotificationEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "environment_namespace"),
    3: .standard(proto: "source_type"),
    4: .same(proto: "notification"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 3: try decoder.decodeSingularEnumField(value: &self.sourceType)
      case 4: try decoder.decodeSingularMessageField(value: &self._notification)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 2)
    }
    if self.sourceType != .domainEventFeature {
      try visitor.visitSingularEnumField(value: self.sourceType, fieldNumber: 3)
    }
    if let v = self._notification {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Notification_Sender_NotificationEvent, rhs: Bucketeer_Notification_Sender_NotificationEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.sourceType != rhs.sourceType {return false}
    if lhs._notification != rhs._notification {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
