// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/notification/sender/notification.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Notification_Sender_Notification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Bucketeer_Notification_Sender_Notification.TypeEnum = .domainEvent

  var domainEventNotification: Bucketeer_Notification_Sender_DomainEventNotification {
    get {return _domainEventNotification ?? Bucketeer_Notification_Sender_DomainEventNotification()}
    set {_domainEventNotification = newValue}
  }
  /// Returns true if `domainEventNotification` has been explicitly set.
  var hasDomainEventNotification: Bool {return self._domainEventNotification != nil}
  /// Clears the value of `domainEventNotification`. Subsequent reads from it will return its default value.
  mutating func clearDomainEventNotification() {self._domainEventNotification = nil}

  var featureStaleNotification: Bucketeer_Notification_Sender_FeatureStaleNotification {
    get {return _featureStaleNotification ?? Bucketeer_Notification_Sender_FeatureStaleNotification()}
    set {_featureStaleNotification = newValue}
  }
  /// Returns true if `featureStaleNotification` has been explicitly set.
  var hasFeatureStaleNotification: Bool {return self._featureStaleNotification != nil}
  /// Clears the value of `featureStaleNotification`. Subsequent reads from it will return its default value.
  mutating func clearFeatureStaleNotification() {self._featureStaleNotification = nil}

  var experimentRunningNotification: Bucketeer_Notification_Sender_ExperimentRunningNotification {
    get {return _experimentRunningNotification ?? Bucketeer_Notification_Sender_ExperimentRunningNotification()}
    set {_experimentRunningNotification = newValue}
  }
  /// Returns true if `experimentRunningNotification` has been explicitly set.
  var hasExperimentRunningNotification: Bool {return self._experimentRunningNotification != nil}
  /// Clears the value of `experimentRunningNotification`. Subsequent reads from it will return its default value.
  mutating func clearExperimentRunningNotification() {self._experimentRunningNotification = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case domainEvent // = 0
    case featureStale // = 1
    case experimentRunning // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .domainEvent
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .domainEvent
      case 1: self = .featureStale
      case 2: self = .experimentRunning
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .domainEvent: return 0
      case .featureStale: return 1
      case .experimentRunning: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _domainEventNotification: Bucketeer_Notification_Sender_DomainEventNotification? = nil
  fileprivate var _featureStaleNotification: Bucketeer_Notification_Sender_FeatureStaleNotification? = nil
  fileprivate var _experimentRunningNotification: Bucketeer_Notification_Sender_ExperimentRunningNotification? = nil
}

#if swift(>=4.2)

extension Bucketeer_Notification_Sender_Notification.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bucketeer_Notification_Sender_Notification.TypeEnum] = [
    .domainEvent,
    .featureStale,
    .experimentRunning,
  ]
}

#endif  // swift(>=4.2)

struct Bucketeer_Notification_Sender_DomainEventNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var environmentNamespace: String = String()

  var editor: Bucketeer_Event_Domain_Editor {
    get {return _editor ?? Bucketeer_Event_Domain_Editor()}
    set {_editor = newValue}
  }
  /// Returns true if `editor` has been explicitly set.
  var hasEditor: Bool {return self._editor != nil}
  /// Clears the value of `editor`. Subsequent reads from it will return its default value.
  mutating func clearEditor() {self._editor = nil}

  var entityType: Bucketeer_Event_Domain_Event.EntityType = .feature

  var entityID: String = String()

  var type: Bucketeer_Event_Domain_Event.TypeEnum = .unknown

  var environmentID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _editor: Bucketeer_Event_Domain_Editor? = nil
}

struct Bucketeer_Notification_Sender_FeatureStaleNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var environmentNamespace: String = String()

  var features: [Bucketeer_Feature_Feature] = []

  var environmentID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Notification_Sender_ExperimentRunningNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var environmentNamespace: String = String()

  var environmentID: String = String()

  var experiments: [Bucketeer_Experiment_Experiment] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.notification.sender"

extension Bucketeer_Notification_Sender_Notification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Notification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "domain_event_notification"),
    3: .standard(proto: "feature_stale_notification"),
    4: .standard(proto: "experiment_running_notification"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeSingularMessageField(value: &self._domainEventNotification)
      case 3: try decoder.decodeSingularMessageField(value: &self._featureStaleNotification)
      case 4: try decoder.decodeSingularMessageField(value: &self._experimentRunningNotification)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .domainEvent {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if let v = self._domainEventNotification {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._featureStaleNotification {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._experimentRunningNotification {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Notification_Sender_Notification, rhs: Bucketeer_Notification_Sender_Notification) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs._domainEventNotification != rhs._domainEventNotification {return false}
    if lhs._featureStaleNotification != rhs._featureStaleNotification {return false}
    if lhs._experimentRunningNotification != rhs._experimentRunningNotification {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Notification_Sender_Notification.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DomainEvent"),
    1: .same(proto: "FeatureStale"),
    2: .same(proto: "ExperimentRunning"),
  ]
}

extension Bucketeer_Notification_Sender_DomainEventNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DomainEventNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_namespace"),
    2: .same(proto: "editor"),
    3: .standard(proto: "entity_type"),
    4: .standard(proto: "entity_id"),
    5: .same(proto: "type"),
    6: .standard(proto: "environment_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 2: try decoder.decodeSingularMessageField(value: &self._editor)
      case 3: try decoder.decodeSingularEnumField(value: &self.entityType)
      case 4: try decoder.decodeSingularStringField(value: &self.entityID)
      case 5: try decoder.decodeSingularEnumField(value: &self.type)
      case 6: try decoder.decodeSingularStringField(value: &self.environmentID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 1)
    }
    if let v = self._editor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.entityType != .feature {
      try visitor.visitSingularEnumField(value: self.entityType, fieldNumber: 3)
    }
    if !self.entityID.isEmpty {
      try visitor.visitSingularStringField(value: self.entityID, fieldNumber: 4)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 5)
    }
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Notification_Sender_DomainEventNotification, rhs: Bucketeer_Notification_Sender_DomainEventNotification) -> Bool {
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs._editor != rhs._editor {return false}
    if lhs.entityType != rhs.entityType {return false}
    if lhs.entityID != rhs.entityID {return false}
    if lhs.type != rhs.type {return false}
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Notification_Sender_FeatureStaleNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureStaleNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_namespace"),
    2: .same(proto: "features"),
    3: .standard(proto: "environment_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.features)
      case 3: try decoder.decodeSingularStringField(value: &self.environmentID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 1)
    }
    if !self.features.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.features, fieldNumber: 2)
    }
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Notification_Sender_FeatureStaleNotification, rhs: Bucketeer_Notification_Sender_FeatureStaleNotification) -> Bool {
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.features != rhs.features {return false}
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Notification_Sender_ExperimentRunningNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExperimentRunningNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_namespace"),
    2: .standard(proto: "environment_id"),
    3: .same(proto: "experiments"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 2: try decoder.decodeSingularStringField(value: &self.environmentID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.experiments)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 1)
    }
    if !self.environmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentID, fieldNumber: 2)
    }
    if !self.experiments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.experiments, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Notification_Sender_ExperimentRunningNotification, rhs: Bucketeer_Notification_Sender_ExperimentRunningNotification) -> Bool {
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.environmentID != rhs.environmentID {return false}
    if lhs.experiments != rhs.experiments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
