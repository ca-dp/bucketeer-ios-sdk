// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/notification/subscription.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Notification_Subscription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var createdAt: Int64 = 0

  var updatedAt: Int64 = 0

  var disabled: Bool = false

  var sourceTypes: [Bucketeer_Notification_Subscription.SourceType] = []

  var recipient: Bucketeer_Notification_Recipient {
    get {return _recipient ?? Bucketeer_Notification_Recipient()}
    set {_recipient = newValue}
  }
  /// Returns true if `recipient` has been explicitly set.
  var hasRecipient: Bool {return self._recipient != nil}
  /// Clears the value of `recipient`. Subsequent reads from it will return its default value.
  mutating func clearRecipient() {self._recipient = nil}

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum SourceType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case domainEventFeature // = 0
    case domainEventGoal // = 1
    case domainEventExperiment // = 2
    case domainEventAccount // = 3
    case domainEventApikey // = 4
    case domainEventSegment // = 5
    case domainEventEnvironment // = 6
    case domainEventAdminAccount // = 7
    case domainEventAutoopsRule // = 8
    case domainEventPush // = 9
    case domainEventSubscription // = 10
    case domainEventAdminSubscription // = 11
    case featureStale // = 100
    case experimentRunning // = 200
    case UNRECOGNIZED(Int)

    init() {
      self = .domainEventFeature
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .domainEventFeature
      case 1: self = .domainEventGoal
      case 2: self = .domainEventExperiment
      case 3: self = .domainEventAccount
      case 4: self = .domainEventApikey
      case 5: self = .domainEventSegment
      case 6: self = .domainEventEnvironment
      case 7: self = .domainEventAdminAccount
      case 8: self = .domainEventAutoopsRule
      case 9: self = .domainEventPush
      case 10: self = .domainEventSubscription
      case 11: self = .domainEventAdminSubscription
      case 100: self = .featureStale
      case 200: self = .experimentRunning
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .domainEventFeature: return 0
      case .domainEventGoal: return 1
      case .domainEventExperiment: return 2
      case .domainEventAccount: return 3
      case .domainEventApikey: return 4
      case .domainEventSegment: return 5
      case .domainEventEnvironment: return 6
      case .domainEventAdminAccount: return 7
      case .domainEventAutoopsRule: return 8
      case .domainEventPush: return 9
      case .domainEventSubscription: return 10
      case .domainEventAdminSubscription: return 11
      case .featureStale: return 100
      case .experimentRunning: return 200
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _recipient: Bucketeer_Notification_Recipient? = nil
}

#if swift(>=4.2)

extension Bucketeer_Notification_Subscription.SourceType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bucketeer_Notification_Subscription.SourceType] = [
    .domainEventFeature,
    .domainEventGoal,
    .domainEventExperiment,
    .domainEventAccount,
    .domainEventApikey,
    .domainEventSegment,
    .domainEventEnvironment,
    .domainEventAdminAccount,
    .domainEventAutoopsRule,
    .domainEventPush,
    .domainEventSubscription,
    .domainEventAdminSubscription,
    .featureStale,
    .experimentRunning,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.notification"

extension Bucketeer_Notification_Subscription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Subscription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "created_at"),
    3: .standard(proto: "updated_at"),
    4: .same(proto: "disabled"),
    5: .standard(proto: "source_types"),
    6: .same(proto: "recipient"),
    7: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.createdAt)
      case 3: try decoder.decodeSingularInt64Field(value: &self.updatedAt)
      case 4: try decoder.decodeSingularBoolField(value: &self.disabled)
      case 5: try decoder.decodeRepeatedEnumField(value: &self.sourceTypes)
      case 6: try decoder.decodeSingularMessageField(value: &self._recipient)
      case 7: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAt, fieldNumber: 2)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.updatedAt, fieldNumber: 3)
    }
    if self.disabled != false {
      try visitor.visitSingularBoolField(value: self.disabled, fieldNumber: 4)
    }
    if !self.sourceTypes.isEmpty {
      try visitor.visitPackedEnumField(value: self.sourceTypes, fieldNumber: 5)
    }
    if let v = self._recipient {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Notification_Subscription, rhs: Bucketeer_Notification_Subscription) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.disabled != rhs.disabled {return false}
    if lhs.sourceTypes != rhs.sourceTypes {return false}
    if lhs._recipient != rhs._recipient {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Notification_Subscription.SourceType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DOMAIN_EVENT_FEATURE"),
    1: .same(proto: "DOMAIN_EVENT_GOAL"),
    2: .same(proto: "DOMAIN_EVENT_EXPERIMENT"),
    3: .same(proto: "DOMAIN_EVENT_ACCOUNT"),
    4: .same(proto: "DOMAIN_EVENT_APIKEY"),
    5: .same(proto: "DOMAIN_EVENT_SEGMENT"),
    6: .same(proto: "DOMAIN_EVENT_ENVIRONMENT"),
    7: .same(proto: "DOMAIN_EVENT_ADMIN_ACCOUNT"),
    8: .same(proto: "DOMAIN_EVENT_AUTOOPS_RULE"),
    9: .same(proto: "DOMAIN_EVENT_PUSH"),
    10: .same(proto: "DOMAIN_EVENT_SUBSCRIPTION"),
    11: .same(proto: "DOMAIN_EVENT_ADMIN_SUBSCRIPTION"),
    100: .same(proto: "FEATURE_STALE"),
    200: .same(proto: "EXPERIMENT_RUNNING"),
  ]
}
