// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/push/service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Push_CreatePushRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var environmentNamespace: String = String()

  var command: Bucketeer_Push_CreatePushCommand {
    get {return _command ?? Bucketeer_Push_CreatePushCommand()}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  mutating func clearCommand() {self._command = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _command: Bucketeer_Push_CreatePushCommand? = nil
}

struct Bucketeer_Push_CreatePushResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Push_ListPushesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var environmentNamespace: String = String()

  var pageSize: Int64 = 0

  var cursor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Push_ListPushesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pushes: [Bucketeer_Push_Push] = []

  var cursor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Push_DeletePushRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var environmentNamespace: String = String()

  var id: String = String()

  var command: Bucketeer_Push_DeletePushCommand {
    get {return _command ?? Bucketeer_Push_DeletePushCommand()}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  mutating func clearCommand() {self._command = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _command: Bucketeer_Push_DeletePushCommand? = nil
}

struct Bucketeer_Push_DeletePushResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Push_UpdatePushRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var environmentNamespace: String = String()

  var id: String = String()

  var addPushTagsCommand: Bucketeer_Push_AddPushTagsCommand {
    get {return _addPushTagsCommand ?? Bucketeer_Push_AddPushTagsCommand()}
    set {_addPushTagsCommand = newValue}
  }
  /// Returns true if `addPushTagsCommand` has been explicitly set.
  var hasAddPushTagsCommand: Bool {return self._addPushTagsCommand != nil}
  /// Clears the value of `addPushTagsCommand`. Subsequent reads from it will return its default value.
  mutating func clearAddPushTagsCommand() {self._addPushTagsCommand = nil}

  var deletePushTagsCommand: Bucketeer_Push_DeletePushTagsCommand {
    get {return _deletePushTagsCommand ?? Bucketeer_Push_DeletePushTagsCommand()}
    set {_deletePushTagsCommand = newValue}
  }
  /// Returns true if `deletePushTagsCommand` has been explicitly set.
  var hasDeletePushTagsCommand: Bool {return self._deletePushTagsCommand != nil}
  /// Clears the value of `deletePushTagsCommand`. Subsequent reads from it will return its default value.
  mutating func clearDeletePushTagsCommand() {self._deletePushTagsCommand = nil}

  var renamePushCommand: Bucketeer_Push_RenamePushCommand {
    get {return _renamePushCommand ?? Bucketeer_Push_RenamePushCommand()}
    set {_renamePushCommand = newValue}
  }
  /// Returns true if `renamePushCommand` has been explicitly set.
  var hasRenamePushCommand: Bool {return self._renamePushCommand != nil}
  /// Clears the value of `renamePushCommand`. Subsequent reads from it will return its default value.
  mutating func clearRenamePushCommand() {self._renamePushCommand = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _addPushTagsCommand: Bucketeer_Push_AddPushTagsCommand? = nil
  fileprivate var _deletePushTagsCommand: Bucketeer_Push_DeletePushTagsCommand? = nil
  fileprivate var _renamePushCommand: Bucketeer_Push_RenamePushCommand? = nil
}

struct Bucketeer_Push_UpdatePushResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.push"

extension Bucketeer_Push_CreatePushRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreatePushRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_namespace"),
    2: .same(proto: "command"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 2: try decoder.decodeSingularMessageField(value: &self._command)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 1)
    }
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Push_CreatePushRequest, rhs: Bucketeer_Push_CreatePushRequest) -> Bool {
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs._command != rhs._command {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Push_CreatePushResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreatePushResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Push_CreatePushResponse, rhs: Bucketeer_Push_CreatePushResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Push_ListPushesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListPushesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_namespace"),
    2: .standard(proto: "page_size"),
    3: .same(proto: "cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 2: try decoder.decodeSingularInt64Field(value: &self.pageSize)
      case 3: try decoder.decodeSingularStringField(value: &self.cursor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt64Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Push_ListPushesRequest, rhs: Bucketeer_Push_ListPushesRequest) -> Bool {
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Push_ListPushesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListPushesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pushes"),
    2: .same(proto: "cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.pushes)
      case 2: try decoder.decodeSingularStringField(value: &self.cursor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pushes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pushes, fieldNumber: 1)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Push_ListPushesResponse, rhs: Bucketeer_Push_ListPushesResponse) -> Bool {
    if lhs.pushes != rhs.pushes {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Push_DeletePushRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeletePushRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_namespace"),
    2: .same(proto: "id"),
    3: .same(proto: "command"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularMessageField(value: &self._command)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Push_DeletePushRequest, rhs: Bucketeer_Push_DeletePushRequest) -> Bool {
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.id != rhs.id {return false}
    if lhs._command != rhs._command {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Push_DeletePushResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeletePushResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Push_DeletePushResponse, rhs: Bucketeer_Push_DeletePushResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Push_UpdatePushRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdatePushRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_namespace"),
    2: .same(proto: "id"),
    3: .standard(proto: "add_push_tags_command"),
    4: .standard(proto: "delete_push_tags_command"),
    5: .standard(proto: "rename_push_command"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularMessageField(value: &self._addPushTagsCommand)
      case 4: try decoder.decodeSingularMessageField(value: &self._deletePushTagsCommand)
      case 5: try decoder.decodeSingularMessageField(value: &self._renamePushCommand)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if let v = self._addPushTagsCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._deletePushTagsCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._renamePushCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Push_UpdatePushRequest, rhs: Bucketeer_Push_UpdatePushRequest) -> Bool {
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.id != rhs.id {return false}
    if lhs._addPushTagsCommand != rhs._addPushTagsCommand {return false}
    if lhs._deletePushTagsCommand != rhs._deletePushTagsCommand {return false}
    if lhs._renamePushCommand != rhs._renamePushCommand {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Push_UpdatePushResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdatePushResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Push_UpdatePushResponse, rhs: Bucketeer_Push_UpdatePushResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
