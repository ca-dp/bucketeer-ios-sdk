// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/experiment/service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Experiment_GetGoalRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var environmentNamespace: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Experiment_GetGoalResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var goal: Bucketeer_Experiment_Goal {
    get {return _goal ?? Bucketeer_Experiment_Goal()}
    set {_goal = newValue}
  }
  /// Returns true if `goal` has been explicitly set.
  var hasGoal: Bool {return self._goal != nil}
  /// Clears the value of `goal`. Subsequent reads from it will return its default value.
  mutating func clearGoal() {self._goal = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _goal: Bucketeer_Experiment_Goal? = nil
}

struct Bucketeer_Experiment_ListGoalsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pageSize: Int64 = 0

  var cursor: String = String()

  var environmentNamespace: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Experiment_ListGoalsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var goals: [Bucketeer_Experiment_Goal] = []

  var cursor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Experiment_CreateGoalRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var command: Bucketeer_Experiment_CreateGoalCommand {
    get {return _command ?? Bucketeer_Experiment_CreateGoalCommand()}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  mutating func clearCommand() {self._command = nil}

  var environmentNamespace: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _command: Bucketeer_Experiment_CreateGoalCommand? = nil
}

struct Bucketeer_Experiment_CreateGoalResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Experiment_DeleteGoalRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var command: Bucketeer_Experiment_DeleteGoalCommand {
    get {return _command ?? Bucketeer_Experiment_DeleteGoalCommand()}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  mutating func clearCommand() {self._command = nil}

  var environmentNamespace: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _command: Bucketeer_Experiment_DeleteGoalCommand? = nil
}

struct Bucketeer_Experiment_DeleteGoalResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Experiment_UpdateGoalRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var renameCommand: Bucketeer_Experiment_RenameGoalCommand {
    get {return _renameCommand ?? Bucketeer_Experiment_RenameGoalCommand()}
    set {_renameCommand = newValue}
  }
  /// Returns true if `renameCommand` has been explicitly set.
  var hasRenameCommand: Bool {return self._renameCommand != nil}
  /// Clears the value of `renameCommand`. Subsequent reads from it will return its default value.
  mutating func clearRenameCommand() {self._renameCommand = nil}

  var changeDescriptionCommand: Bucketeer_Experiment_ChangeDescriptionGoalCommand {
    get {return _changeDescriptionCommand ?? Bucketeer_Experiment_ChangeDescriptionGoalCommand()}
    set {_changeDescriptionCommand = newValue}
  }
  /// Returns true if `changeDescriptionCommand` has been explicitly set.
  var hasChangeDescriptionCommand: Bool {return self._changeDescriptionCommand != nil}
  /// Clears the value of `changeDescriptionCommand`. Subsequent reads from it will return its default value.
  mutating func clearChangeDescriptionCommand() {self._changeDescriptionCommand = nil}

  var environmentNamespace: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _renameCommand: Bucketeer_Experiment_RenameGoalCommand? = nil
  fileprivate var _changeDescriptionCommand: Bucketeer_Experiment_ChangeDescriptionGoalCommand? = nil
}

struct Bucketeer_Experiment_UpdateGoalResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Experiment_GetExperimentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var environmentNamespace: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Experiment_GetExperimentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var experiment: Bucketeer_Experiment_Experiment {
    get {return _experiment ?? Bucketeer_Experiment_Experiment()}
    set {_experiment = newValue}
  }
  /// Returns true if `experiment` has been explicitly set.
  var hasExperiment: Bool {return self._experiment != nil}
  /// Clears the value of `experiment`. Subsequent reads from it will return its default value.
  mutating func clearExperiment() {self._experiment = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _experiment: Bucketeer_Experiment_Experiment? = nil
}

struct Bucketeer_Experiment_ListExperimentsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureID: String = String()

  var featureVersion: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _featureVersion ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_featureVersion = newValue}
  }
  /// Returns true if `featureVersion` has been explicitly set.
  var hasFeatureVersion: Bool {return self._featureVersion != nil}
  /// Clears the value of `featureVersion`. Subsequent reads from it will return its default value.
  mutating func clearFeatureVersion() {self._featureVersion = nil}

  var from: Int64 = 0

  var to: Int64 = 0

  var pageSize: Int64 = 0

  var cursor: String = String()

  var environmentNamespace: String = String()

  var status: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _status ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _featureVersion: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
  fileprivate var _status: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
}

struct Bucketeer_Experiment_ListExperimentsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var experiments: [Bucketeer_Experiment_Experiment] = []

  var cursor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Experiment_CreateExperimentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var command: Bucketeer_Experiment_CreateExperimentCommand {
    get {return _command ?? Bucketeer_Experiment_CreateExperimentCommand()}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  mutating func clearCommand() {self._command = nil}

  var environmentNamespace: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _command: Bucketeer_Experiment_CreateExperimentCommand? = nil
}

struct Bucketeer_Experiment_CreateExperimentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var experiment: Bucketeer_Experiment_Experiment {
    get {return _experiment ?? Bucketeer_Experiment_Experiment()}
    set {_experiment = newValue}
  }
  /// Returns true if `experiment` has been explicitly set.
  var hasExperiment: Bool {return self._experiment != nil}
  /// Clears the value of `experiment`. Subsequent reads from it will return its default value.
  mutating func clearExperiment() {self._experiment = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _experiment: Bucketeer_Experiment_Experiment? = nil
}

struct Bucketeer_Experiment_UpdateExperimentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var changeStartAtCommand: Bucketeer_Experiment_ChangeStartAtExperimentCommand {
    get {return _changeStartAtCommand ?? Bucketeer_Experiment_ChangeStartAtExperimentCommand()}
    set {_changeStartAtCommand = newValue}
  }
  /// Returns true if `changeStartAtCommand` has been explicitly set.
  var hasChangeStartAtCommand: Bool {return self._changeStartAtCommand != nil}
  /// Clears the value of `changeStartAtCommand`. Subsequent reads from it will return its default value.
  mutating func clearChangeStartAtCommand() {self._changeStartAtCommand = nil}

  var changeStopAtCommand: Bucketeer_Experiment_ChangeStopAtExperimentCommand {
    get {return _changeStopAtCommand ?? Bucketeer_Experiment_ChangeStopAtExperimentCommand()}
    set {_changeStopAtCommand = newValue}
  }
  /// Returns true if `changeStopAtCommand` has been explicitly set.
  var hasChangeStopAtCommand: Bool {return self._changeStopAtCommand != nil}
  /// Clears the value of `changeStopAtCommand`. Subsequent reads from it will return its default value.
  mutating func clearChangeStopAtCommand() {self._changeStopAtCommand = nil}

  var environmentNamespace: String = String()

  var changeExperimentPeriodCommand: Bucketeer_Experiment_ChangeExperimentPeriodCommand {
    get {return _changeExperimentPeriodCommand ?? Bucketeer_Experiment_ChangeExperimentPeriodCommand()}
    set {_changeExperimentPeriodCommand = newValue}
  }
  /// Returns true if `changeExperimentPeriodCommand` has been explicitly set.
  var hasChangeExperimentPeriodCommand: Bool {return self._changeExperimentPeriodCommand != nil}
  /// Clears the value of `changeExperimentPeriodCommand`. Subsequent reads from it will return its default value.
  mutating func clearChangeExperimentPeriodCommand() {self._changeExperimentPeriodCommand = nil}

  var changeNameCommand: Bucketeer_Experiment_ChangeExperimentNameCommand {
    get {return _changeNameCommand ?? Bucketeer_Experiment_ChangeExperimentNameCommand()}
    set {_changeNameCommand = newValue}
  }
  /// Returns true if `changeNameCommand` has been explicitly set.
  var hasChangeNameCommand: Bool {return self._changeNameCommand != nil}
  /// Clears the value of `changeNameCommand`. Subsequent reads from it will return its default value.
  mutating func clearChangeNameCommand() {self._changeNameCommand = nil}

  var changeDescriptionCommand: Bucketeer_Experiment_ChangeExperimentDescriptionCommand {
    get {return _changeDescriptionCommand ?? Bucketeer_Experiment_ChangeExperimentDescriptionCommand()}
    set {_changeDescriptionCommand = newValue}
  }
  /// Returns true if `changeDescriptionCommand` has been explicitly set.
  var hasChangeDescriptionCommand: Bool {return self._changeDescriptionCommand != nil}
  /// Clears the value of `changeDescriptionCommand`. Subsequent reads from it will return its default value.
  mutating func clearChangeDescriptionCommand() {self._changeDescriptionCommand = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _changeStartAtCommand: Bucketeer_Experiment_ChangeStartAtExperimentCommand? = nil
  fileprivate var _changeStopAtCommand: Bucketeer_Experiment_ChangeStopAtExperimentCommand? = nil
  fileprivate var _changeExperimentPeriodCommand: Bucketeer_Experiment_ChangeExperimentPeriodCommand? = nil
  fileprivate var _changeNameCommand: Bucketeer_Experiment_ChangeExperimentNameCommand? = nil
  fileprivate var _changeDescriptionCommand: Bucketeer_Experiment_ChangeExperimentDescriptionCommand? = nil
}

struct Bucketeer_Experiment_UpdateExperimentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Experiment_StartExperimentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var environmentNamespace: String = String()

  var id: String = String()

  var command: Bucketeer_Experiment_StartExperimentCommand {
    get {return _command ?? Bucketeer_Experiment_StartExperimentCommand()}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  mutating func clearCommand() {self._command = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _command: Bucketeer_Experiment_StartExperimentCommand? = nil
}

struct Bucketeer_Experiment_StartExperimentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Experiment_FinishExperimentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var environmentNamespace: String = String()

  var id: String = String()

  var command: Bucketeer_Experiment_FinishExperimentCommand {
    get {return _command ?? Bucketeer_Experiment_FinishExperimentCommand()}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  mutating func clearCommand() {self._command = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _command: Bucketeer_Experiment_FinishExperimentCommand? = nil
}

struct Bucketeer_Experiment_FinishExperimentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Experiment_StopExperimentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var command: Bucketeer_Experiment_StopExperimentCommand {
    get {return _command ?? Bucketeer_Experiment_StopExperimentCommand()}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  mutating func clearCommand() {self._command = nil}

  var environmentNamespace: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _command: Bucketeer_Experiment_StopExperimentCommand? = nil
}

struct Bucketeer_Experiment_StopExperimentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Experiment_DeleteExperimentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var command: Bucketeer_Experiment_DeleteExperimentCommand {
    get {return _command ?? Bucketeer_Experiment_DeleteExperimentCommand()}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  mutating func clearCommand() {self._command = nil}

  var environmentNamespace: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _command: Bucketeer_Experiment_DeleteExperimentCommand? = nil
}

struct Bucketeer_Experiment_DeleteExperimentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.experiment"

extension Bucketeer_Experiment_GetGoalRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetGoalRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "environment_namespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_GetGoalRequest, rhs: Bucketeer_Experiment_GetGoalRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_GetGoalResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetGoalResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "goal"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._goal)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._goal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_GetGoalResponse, rhs: Bucketeer_Experiment_GetGoalResponse) -> Bool {
    if lhs._goal != rhs._goal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_ListGoalsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListGoalsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "page_size"),
    2: .same(proto: "cursor"),
    3: .standard(proto: "environment_namespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.pageSize)
      case 2: try decoder.decodeSingularStringField(value: &self.cursor)
      case 3: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pageSize != 0 {
      try visitor.visitSingularInt64Field(value: self.pageSize, fieldNumber: 1)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 2)
    }
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_ListGoalsRequest, rhs: Bucketeer_Experiment_ListGoalsRequest) -> Bool {
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_ListGoalsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListGoalsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "goals"),
    2: .same(proto: "cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.goals)
      case 2: try decoder.decodeSingularStringField(value: &self.cursor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.goals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.goals, fieldNumber: 1)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_ListGoalsResponse, rhs: Bucketeer_Experiment_ListGoalsResponse) -> Bool {
    if lhs.goals != rhs.goals {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_CreateGoalRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateGoalRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
    2: .standard(proto: "environment_namespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._command)
      case 2: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_CreateGoalRequest, rhs: Bucketeer_Experiment_CreateGoalRequest) -> Bool {
    if lhs._command != rhs._command {return false}
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_CreateGoalResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateGoalResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_CreateGoalResponse, rhs: Bucketeer_Experiment_CreateGoalResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_DeleteGoalRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteGoalRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "command"),
    3: .standard(proto: "environment_namespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._command)
      case 3: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_DeleteGoalRequest, rhs: Bucketeer_Experiment_DeleteGoalRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._command != rhs._command {return false}
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_DeleteGoalResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteGoalResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_DeleteGoalResponse, rhs: Bucketeer_Experiment_DeleteGoalResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_UpdateGoalRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateGoalRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "rename_command"),
    3: .standard(proto: "change_description_command"),
    4: .standard(proto: "environment_namespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._renameCommand)
      case 3: try decoder.decodeSingularMessageField(value: &self._changeDescriptionCommand)
      case 4: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._renameCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._changeDescriptionCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_UpdateGoalRequest, rhs: Bucketeer_Experiment_UpdateGoalRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._renameCommand != rhs._renameCommand {return false}
    if lhs._changeDescriptionCommand != rhs._changeDescriptionCommand {return false}
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_UpdateGoalResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateGoalResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_UpdateGoalResponse, rhs: Bucketeer_Experiment_UpdateGoalResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_GetExperimentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetExperimentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "environment_namespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_GetExperimentRequest, rhs: Bucketeer_Experiment_GetExperimentRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_GetExperimentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetExperimentResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "experiment"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._experiment)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._experiment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_GetExperimentResponse, rhs: Bucketeer_Experiment_GetExperimentResponse) -> Bool {
    if lhs._experiment != rhs._experiment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_ListExperimentsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListExperimentsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_id"),
    2: .standard(proto: "feature_version"),
    3: .same(proto: "from"),
    4: .same(proto: "to"),
    5: .standard(proto: "page_size"),
    6: .same(proto: "cursor"),
    7: .standard(proto: "environment_namespace"),
    8: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.featureID)
      case 2: try decoder.decodeSingularMessageField(value: &self._featureVersion)
      case 3: try decoder.decodeSingularInt64Field(value: &self.from)
      case 4: try decoder.decodeSingularInt64Field(value: &self.to)
      case 5: try decoder.decodeSingularInt64Field(value: &self.pageSize)
      case 6: try decoder.decodeSingularStringField(value: &self.cursor)
      case 7: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 8: try decoder.decodeSingularMessageField(value: &self._status)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 1)
    }
    if let v = self._featureVersion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.from != 0 {
      try visitor.visitSingularInt64Field(value: self.from, fieldNumber: 3)
    }
    if self.to != 0 {
      try visitor.visitSingularInt64Field(value: self.to, fieldNumber: 4)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt64Field(value: self.pageSize, fieldNumber: 5)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 6)
    }
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 7)
    }
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_ListExperimentsRequest, rhs: Bucketeer_Experiment_ListExperimentsRequest) -> Bool {
    if lhs.featureID != rhs.featureID {return false}
    if lhs._featureVersion != rhs._featureVersion {return false}
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_ListExperimentsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListExperimentsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "experiments"),
    2: .same(proto: "cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.experiments)
      case 2: try decoder.decodeSingularStringField(value: &self.cursor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.experiments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.experiments, fieldNumber: 1)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_ListExperimentsResponse, rhs: Bucketeer_Experiment_ListExperimentsResponse) -> Bool {
    if lhs.experiments != rhs.experiments {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_CreateExperimentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateExperimentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
    2: .standard(proto: "environment_namespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._command)
      case 2: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_CreateExperimentRequest, rhs: Bucketeer_Experiment_CreateExperimentRequest) -> Bool {
    if lhs._command != rhs._command {return false}
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_CreateExperimentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateExperimentResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "experiment"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._experiment)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._experiment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_CreateExperimentResponse, rhs: Bucketeer_Experiment_CreateExperimentResponse) -> Bool {
    if lhs._experiment != rhs._experiment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_UpdateExperimentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateExperimentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "change_start_at_command"),
    3: .standard(proto: "change_stop_at_command"),
    4: .standard(proto: "environment_namespace"),
    5: .standard(proto: "change_experiment_period_command"),
    6: .standard(proto: "change_name_command"),
    7: .standard(proto: "change_description_command"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._changeStartAtCommand)
      case 3: try decoder.decodeSingularMessageField(value: &self._changeStopAtCommand)
      case 4: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 5: try decoder.decodeSingularMessageField(value: &self._changeExperimentPeriodCommand)
      case 6: try decoder.decodeSingularMessageField(value: &self._changeNameCommand)
      case 7: try decoder.decodeSingularMessageField(value: &self._changeDescriptionCommand)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._changeStartAtCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._changeStopAtCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 4)
    }
    if let v = self._changeExperimentPeriodCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._changeNameCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._changeDescriptionCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_UpdateExperimentRequest, rhs: Bucketeer_Experiment_UpdateExperimentRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._changeStartAtCommand != rhs._changeStartAtCommand {return false}
    if lhs._changeStopAtCommand != rhs._changeStopAtCommand {return false}
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs._changeExperimentPeriodCommand != rhs._changeExperimentPeriodCommand {return false}
    if lhs._changeNameCommand != rhs._changeNameCommand {return false}
    if lhs._changeDescriptionCommand != rhs._changeDescriptionCommand {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_UpdateExperimentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateExperimentResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_UpdateExperimentResponse, rhs: Bucketeer_Experiment_UpdateExperimentResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_StartExperimentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartExperimentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_namespace"),
    2: .same(proto: "id"),
    3: .same(proto: "command"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularMessageField(value: &self._command)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_StartExperimentRequest, rhs: Bucketeer_Experiment_StartExperimentRequest) -> Bool {
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.id != rhs.id {return false}
    if lhs._command != rhs._command {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_StartExperimentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartExperimentResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_StartExperimentResponse, rhs: Bucketeer_Experiment_StartExperimentResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_FinishExperimentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FinishExperimentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_namespace"),
    2: .same(proto: "id"),
    3: .same(proto: "command"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularMessageField(value: &self._command)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_FinishExperimentRequest, rhs: Bucketeer_Experiment_FinishExperimentRequest) -> Bool {
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.id != rhs.id {return false}
    if lhs._command != rhs._command {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_FinishExperimentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FinishExperimentResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_FinishExperimentResponse, rhs: Bucketeer_Experiment_FinishExperimentResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_StopExperimentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StopExperimentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "command"),
    3: .standard(proto: "environment_namespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._command)
      case 3: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_StopExperimentRequest, rhs: Bucketeer_Experiment_StopExperimentRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._command != rhs._command {return false}
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_StopExperimentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StopExperimentResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_StopExperimentResponse, rhs: Bucketeer_Experiment_StopExperimentResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_DeleteExperimentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteExperimentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "command"),
    3: .standard(proto: "environment_namespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._command)
      case 3: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_DeleteExperimentRequest, rhs: Bucketeer_Experiment_DeleteExperimentRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._command != rhs._command {return false}
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Experiment_DeleteExperimentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteExperimentResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Experiment_DeleteExperimentResponse, rhs: Bucketeer_Experiment_DeleteExperimentResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
