// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/feature/evaluation.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Feature_Evaluation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var featureID: String {
    get {return _storage._featureID}
    set {_uniqueStorage()._featureID = newValue}
  }

  var featureVersion: Int32 {
    get {return _storage._featureVersion}
    set {_uniqueStorage()._featureVersion = newValue}
  }

  var userID: String {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  var variationID: String {
    get {return _storage._variationID}
    set {_uniqueStorage()._variationID = newValue}
  }

  var variation: Bucketeer_Feature_Variation {
    get {return _storage._variation ?? Bucketeer_Feature_Variation()}
    set {_uniqueStorage()._variation = newValue}
  }
  /// Returns true if `variation` has been explicitly set.
  var hasVariation: Bool {return _storage._variation != nil}
  /// Clears the value of `variation`. Subsequent reads from it will return its default value.
  mutating func clearVariation() {_uniqueStorage()._variation = nil}

  var reason: Bucketeer_Feature_Reason {
    get {return _storage._reason ?? Bucketeer_Feature_Reason()}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  mutating func clearReason() {_uniqueStorage()._reason = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bucketeer_Feature_UserEvaluations {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var evaluations: [Bucketeer_Feature_Evaluation] = []

  var createdAt: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum State: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case queued // = 0
    case partial // = 1
    case full // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .queued
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .queued
      case 1: self = .partial
      case 2: self = .full
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .queued: return 0
      case .partial: return 1
      case .full: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Bucketeer_Feature_UserEvaluations.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bucketeer_Feature_UserEvaluations.State] = [
    .queued,
    .partial,
    .full,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.feature"

extension Bucketeer_Feature_Evaluation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Evaluation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "feature_id"),
    3: .standard(proto: "feature_version"),
    4: .standard(proto: "user_id"),
    5: .standard(proto: "variation_id"),
    6: .same(proto: "variation"),
    7: .same(proto: "reason"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _featureID: String = String()
    var _featureVersion: Int32 = 0
    var _userID: String = String()
    var _variationID: String = String()
    var _variation: Bucketeer_Feature_Variation? = nil
    var _reason: Bucketeer_Feature_Reason? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _featureID = source._featureID
      _featureVersion = source._featureVersion
      _userID = source._userID
      _variationID = source._variationID
      _variation = source._variation
      _reason = source._reason
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._featureID)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._featureVersion)
        case 4: try decoder.decodeSingularStringField(value: &_storage._userID)
        case 5: try decoder.decodeSingularStringField(value: &_storage._variationID)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._variation)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._reason)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._featureID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._featureID, fieldNumber: 2)
      }
      if _storage._featureVersion != 0 {
        try visitor.visitSingularInt32Field(value: _storage._featureVersion, fieldNumber: 3)
      }
      if !_storage._userID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userID, fieldNumber: 4)
      }
      if !_storage._variationID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._variationID, fieldNumber: 5)
      }
      if let v = _storage._variation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._reason {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Feature_Evaluation, rhs: Bucketeer_Feature_Evaluation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._featureID != rhs_storage._featureID {return false}
        if _storage._featureVersion != rhs_storage._featureVersion {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._variationID != rhs_storage._variationID {return false}
        if _storage._variation != rhs_storage._variation {return false}
        if _storage._reason != rhs_storage._reason {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Feature_UserEvaluations: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserEvaluations"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "evaluations"),
    3: .standard(proto: "created_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.evaluations)
      case 3: try decoder.decodeSingularInt64Field(value: &self.createdAt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.evaluations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.evaluations, fieldNumber: 2)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAt, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Feature_UserEvaluations, rhs: Bucketeer_Feature_UserEvaluations) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.evaluations != rhs.evaluations {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Feature_UserEvaluations.State: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "QUEUED"),
    1: .same(proto: "PARTIAL"),
    2: .same(proto: "FULL"),
  ]
}
