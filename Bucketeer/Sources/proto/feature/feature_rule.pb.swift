// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/feature/rule.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Feature_Rule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var strategy: Bucketeer_Feature_Strategy {
    get {return _strategy ?? Bucketeer_Feature_Strategy()}
    set {_strategy = newValue}
  }
  /// Returns true if `strategy` has been explicitly set.
  var hasStrategy: Bool {return self._strategy != nil}
  /// Clears the value of `strategy`. Subsequent reads from it will return its default value.
  mutating func clearStrategy() {self._strategy = nil}

  var clauses: [Bucketeer_Feature_Clause] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _strategy: Bucketeer_Feature_Strategy? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.feature"

extension Bucketeer_Feature_Rule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Rule"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "strategy"),
    3: .same(proto: "clauses"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._strategy)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.clauses)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._strategy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.clauses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.clauses, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Feature_Rule, rhs: Bucketeer_Feature_Rule) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._strategy != rhs._strategy {return false}
    if lhs.clauses != rhs.clauses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
