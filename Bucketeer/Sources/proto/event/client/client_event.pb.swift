// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/event/client/event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Bucketeer_Event_Client_SourceId: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case android // = 1
  case ios // = 2
  case web // = 3
  case goalBatch // = 4
  case goServer // = 5
  case nodeServer // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .android
    case 2: self = .ios
    case 3: self = .web
    case 4: self = .goalBatch
    case 5: self = .goServer
    case 6: self = .nodeServer
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .android: return 1
    case .ios: return 2
    case .web: return 3
    case .goalBatch: return 4
    case .goServer: return 5
    case .nodeServer: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bucketeer_Event_Client_SourceId: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bucketeer_Event_Client_SourceId] = [
    .unknown,
    .android,
    .ios,
    .web,
    .goalBatch,
    .goServer,
    .nodeServer,
  ]
}

#endif  // swift(>=4.2)

struct Bucketeer_Event_Client_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var event: SwiftProtobuf.Google_Protobuf_Any {
    get {return _event ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_event = newValue}
  }
  /// Returns true if `event` has been explicitly set.
  var hasEvent: Bool {return self._event != nil}
  /// Clears the value of `event`. Subsequent reads from it will return its default value.
  mutating func clearEvent() {self._event = nil}

  /// SDK doens't need to set this field. It's set by gateway service.
  var environmentNamespace: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _event: SwiftProtobuf.Google_Protobuf_Any? = nil
}

struct Bucketeer_Event_Client_EvaluationEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestamp: Int64 = 0

  var featureID: String = String()

  var featureVersion: Int32 = 0

  var userID: String = String()

  var variationID: String = String()

  var user: Bucketeer_User_User {
    get {return _user ?? Bucketeer_User_User()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {self._user = nil}

  var reason: Bucketeer_Feature_Reason {
    get {return _reason ?? Bucketeer_Feature_Reason()}
    set {_reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  var hasReason: Bool {return self._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  mutating func clearReason() {self._reason = nil}

  var tag: String = String()

  var sourceID: Bucketeer_Event_Client_SourceId = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _user: Bucketeer_User_User? = nil
  fileprivate var _reason: Bucketeer_Feature_Reason? = nil
}

struct Bucketeer_Event_Client_GoalEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestamp: Int64 = 0

  var goalID: String = String()

  var userID: String = String()

  var value: Double = 0

  var user: Bucketeer_User_User {
    get {return _user ?? Bucketeer_User_User()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {self._user = nil}

  var evaluations: [Bucketeer_Feature_Evaluation] = []

  var tag: String = String()

  var sourceID: Bucketeer_Event_Client_SourceId = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _user: Bucketeer_User_User? = nil
}

struct Bucketeer_Event_Client_MetricsEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestamp: Int64 = 0

  var event: SwiftProtobuf.Google_Protobuf_Any {
    get {return _event ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_event = newValue}
  }
  /// Returns true if `event` has been explicitly set.
  var hasEvent: Bool {return self._event != nil}
  /// Clears the value of `event`. Subsequent reads from it will return its default value.
  mutating func clearEvent() {self._event = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _event: SwiftProtobuf.Google_Protobuf_Any? = nil
}

struct Bucketeer_Event_Client_GetEvaluationLatencyMetricsEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var labels: Dictionary<String,String> = [:]

  var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

struct Bucketeer_Event_Client_GetEvaluationSizeMetricsEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var labels: Dictionary<String,String> = [:]

  var sizeByte: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Client_TimeoutErrorCountMetricsEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tag: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Client_InternalErrorCountMetricsEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tag: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Client_OpsEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestamp: Int64 = 0

  var featureID: String = String()

  var featureVersion: Int32 = 0

  var variationID: String = String()

  var goalID: String = String()

  var userID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Client_GoalBatchEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String = String()

  var userGoalEventsOverTags: [Bucketeer_Event_Client_UserGoalEventsOverTag] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Client_UserGoalEventsOverTag {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tag: String = String()

  var userGoalEvents: [Bucketeer_Event_Client_UserGoalEvent] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Client_UserGoalEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestamp: Int64 = 0

  var goalID: String = String()

  var value: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.event.client"

extension Bucketeer_Event_Client_SourceId: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "ANDROID"),
    2: .same(proto: "IOS"),
    3: .same(proto: "WEB"),
    4: .same(proto: "GOAL_BATCH"),
    5: .same(proto: "GO_SERVER"),
    6: .same(proto: "NODE_SERVER"),
  ]
}

extension Bucketeer_Event_Client_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Event"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "event"),
    3: .standard(proto: "environment_namespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      case 3: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Client_Event, rhs: Bucketeer_Event_Client_Event) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._event != rhs._event {return false}
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Client_EvaluationEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EvaluationEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .standard(proto: "feature_id"),
    3: .standard(proto: "feature_version"),
    4: .standard(proto: "user_id"),
    5: .standard(proto: "variation_id"),
    6: .same(proto: "user"),
    7: .same(proto: "reason"),
    8: .same(proto: "tag"),
    9: .standard(proto: "source_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      case 2: try decoder.decodeSingularStringField(value: &self.featureID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.featureVersion)
      case 4: try decoder.decodeSingularStringField(value: &self.userID)
      case 5: try decoder.decodeSingularStringField(value: &self.variationID)
      case 6: try decoder.decodeSingularMessageField(value: &self._user)
      case 7: try decoder.decodeSingularMessageField(value: &self._reason)
      case 8: try decoder.decodeSingularStringField(value: &self.tag)
      case 9: try decoder.decodeSingularEnumField(value: &self.sourceID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 1)
    }
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 2)
    }
    if self.featureVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.featureVersion, fieldNumber: 3)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 4)
    }
    if !self.variationID.isEmpty {
      try visitor.visitSingularStringField(value: self.variationID, fieldNumber: 5)
    }
    if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._reason {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 8)
    }
    if self.sourceID != .unknown {
      try visitor.visitSingularEnumField(value: self.sourceID, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Client_EvaluationEvent, rhs: Bucketeer_Event_Client_EvaluationEvent) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.featureID != rhs.featureID {return false}
    if lhs.featureVersion != rhs.featureVersion {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.variationID != rhs.variationID {return false}
    if lhs._user != rhs._user {return false}
    if lhs._reason != rhs._reason {return false}
    if lhs.tag != rhs.tag {return false}
    if lhs.sourceID != rhs.sourceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Client_GoalEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GoalEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .standard(proto: "goal_id"),
    3: .standard(proto: "user_id"),
    4: .same(proto: "value"),
    5: .same(proto: "user"),
    6: .same(proto: "evaluations"),
    7: .same(proto: "tag"),
    8: .standard(proto: "source_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      case 2: try decoder.decodeSingularStringField(value: &self.goalID)
      case 3: try decoder.decodeSingularStringField(value: &self.userID)
      case 4: try decoder.decodeSingularDoubleField(value: &self.value)
      case 5: try decoder.decodeSingularMessageField(value: &self._user)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.evaluations)
      case 7: try decoder.decodeSingularStringField(value: &self.tag)
      case 8: try decoder.decodeSingularEnumField(value: &self.sourceID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 1)
    }
    if !self.goalID.isEmpty {
      try visitor.visitSingularStringField(value: self.goalID, fieldNumber: 2)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 3)
    }
    if self.value != 0 {
      try visitor.visitSingularDoubleField(value: self.value, fieldNumber: 4)
    }
    if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.evaluations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.evaluations, fieldNumber: 6)
    }
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 7)
    }
    if self.sourceID != .unknown {
      try visitor.visitSingularEnumField(value: self.sourceID, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Client_GoalEvent, rhs: Bucketeer_Event_Client_GoalEvent) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.goalID != rhs.goalID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.value != rhs.value {return false}
    if lhs._user != rhs._user {return false}
    if lhs.evaluations != rhs.evaluations {return false}
    if lhs.tag != rhs.tag {return false}
    if lhs.sourceID != rhs.sourceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Client_MetricsEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MetricsEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Client_MetricsEvent, rhs: Bucketeer_Event_Client_MetricsEvent) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Client_GetEvaluationLatencyMetricsEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetEvaluationLatencyMetricsEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "labels"),
    2: .same(proto: "duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels)
      case 2: try decoder.decodeSingularMessageField(value: &self._duration)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 1)
    }
    if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Client_GetEvaluationLatencyMetricsEvent, rhs: Bucketeer_Event_Client_GetEvaluationLatencyMetricsEvent) -> Bool {
    if lhs.labels != rhs.labels {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Client_GetEvaluationSizeMetricsEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetEvaluationSizeMetricsEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "labels"),
    2: .standard(proto: "size_byte"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels)
      case 2: try decoder.decodeSingularInt32Field(value: &self.sizeByte)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 1)
    }
    if self.sizeByte != 0 {
      try visitor.visitSingularInt32Field(value: self.sizeByte, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Client_GetEvaluationSizeMetricsEvent, rhs: Bucketeer_Event_Client_GetEvaluationSizeMetricsEvent) -> Bool {
    if lhs.labels != rhs.labels {return false}
    if lhs.sizeByte != rhs.sizeByte {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Client_TimeoutErrorCountMetricsEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TimeoutErrorCountMetricsEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.tag)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Client_TimeoutErrorCountMetricsEvent, rhs: Bucketeer_Event_Client_TimeoutErrorCountMetricsEvent) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Client_InternalErrorCountMetricsEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InternalErrorCountMetricsEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.tag)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Client_InternalErrorCountMetricsEvent, rhs: Bucketeer_Event_Client_InternalErrorCountMetricsEvent) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Client_OpsEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OpsEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .standard(proto: "feature_id"),
    3: .standard(proto: "feature_version"),
    4: .standard(proto: "variation_id"),
    5: .standard(proto: "goal_id"),
    6: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      case 2: try decoder.decodeSingularStringField(value: &self.featureID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.featureVersion)
      case 4: try decoder.decodeSingularStringField(value: &self.variationID)
      case 5: try decoder.decodeSingularStringField(value: &self.goalID)
      case 6: try decoder.decodeSingularStringField(value: &self.userID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 1)
    }
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 2)
    }
    if self.featureVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.featureVersion, fieldNumber: 3)
    }
    if !self.variationID.isEmpty {
      try visitor.visitSingularStringField(value: self.variationID, fieldNumber: 4)
    }
    if !self.goalID.isEmpty {
      try visitor.visitSingularStringField(value: self.goalID, fieldNumber: 5)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Client_OpsEvent, rhs: Bucketeer_Event_Client_OpsEvent) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.featureID != rhs.featureID {return false}
    if lhs.featureVersion != rhs.featureVersion {return false}
    if lhs.variationID != rhs.variationID {return false}
    if lhs.goalID != rhs.goalID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Client_GoalBatchEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GoalBatchEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "user_goal_events_over_tags"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.userID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.userGoalEventsOverTags)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 1)
    }
    if !self.userGoalEventsOverTags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userGoalEventsOverTags, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Client_GoalBatchEvent, rhs: Bucketeer_Event_Client_GoalBatchEvent) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.userGoalEventsOverTags != rhs.userGoalEventsOverTags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Client_UserGoalEventsOverTag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserGoalEventsOverTag"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .standard(proto: "user_goal_events"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.tag)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.userGoalEvents)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 1)
    }
    if !self.userGoalEvents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userGoalEvents, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Client_UserGoalEventsOverTag, rhs: Bucketeer_Event_Client_UserGoalEventsOverTag) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.userGoalEvents != rhs.userGoalEvents {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Client_UserGoalEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserGoalEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .standard(proto: "goal_id"),
    3: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      case 2: try decoder.decodeSingularStringField(value: &self.goalID)
      case 3: try decoder.decodeSingularDoubleField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 1)
    }
    if !self.goalID.isEmpty {
      try visitor.visitSingularStringField(value: self.goalID, fieldNumber: 2)
    }
    if self.value != 0 {
      try visitor.visitSingularDoubleField(value: self.value, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Client_UserGoalEvent, rhs: Bucketeer_Event_Client_UserGoalEvent) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.goalID != rhs.goalID {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
