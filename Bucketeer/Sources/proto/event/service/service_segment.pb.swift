// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/event/service/segment.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Event_Service_BulkSegmentUsersReceivedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var environmentNamespace: String {
    get {return _storage._environmentNamespace}
    set {_uniqueStorage()._environmentNamespace = newValue}
  }

  var segmentID: String {
    get {return _storage._segmentID}
    set {_uniqueStorage()._segmentID = newValue}
  }

  var data: Data {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  var state: Bucketeer_Feature_SegmentUser.State {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  var editor: Bucketeer_Event_Domain_Editor {
    get {return _storage._editor ?? Bucketeer_Event_Domain_Editor()}
    set {_uniqueStorage()._editor = newValue}
  }
  /// Returns true if `editor` has been explicitly set.
  var hasEditor: Bool {return _storage._editor != nil}
  /// Clears the value of `editor`. Subsequent reads from it will return its default value.
  mutating func clearEditor() {_uniqueStorage()._editor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.event.service"

extension Bucketeer_Event_Service_BulkSegmentUsersReceivedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BulkSegmentUsersReceivedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "environment_namespace"),
    3: .standard(proto: "segment_id"),
    4: .same(proto: "data"),
    5: .same(proto: "state"),
    6: .same(proto: "editor"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _environmentNamespace: String = String()
    var _segmentID: String = String()
    var _data: Data = SwiftProtobuf.Internal.emptyData
    var _state: Bucketeer_Feature_SegmentUser.State = .included
    var _editor: Bucketeer_Event_Domain_Editor? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _environmentNamespace = source._environmentNamespace
      _segmentID = source._segmentID
      _data = source._data
      _state = source._state
      _editor = source._editor
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._environmentNamespace)
        case 3: try decoder.decodeSingularStringField(value: &_storage._segmentID)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._data)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._state)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._editor)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._environmentNamespace.isEmpty {
        try visitor.visitSingularStringField(value: _storage._environmentNamespace, fieldNumber: 2)
      }
      if !_storage._segmentID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._segmentID, fieldNumber: 3)
      }
      if !_storage._data.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._data, fieldNumber: 4)
      }
      if _storage._state != .included {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 5)
      }
      if let v = _storage._editor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Service_BulkSegmentUsersReceivedEvent, rhs: Bucketeer_Event_Service_BulkSegmentUsersReceivedEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._environmentNamespace != rhs_storage._environmentNamespace {return false}
        if _storage._segmentID != rhs_storage._segmentID {return false}
        if _storage._data != rhs_storage._data {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._editor != rhs_storage._editor {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
