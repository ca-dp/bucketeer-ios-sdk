// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/event/domain/event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Event_Domain_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var timestamp: Int64 = 0

  var entityType: Bucketeer_Event_Domain_Event.EntityType = .feature

  var entityID: String = String()

  var type: Bucketeer_Event_Domain_Event.TypeEnum = .unknown

  var editor: Bucketeer_Event_Domain_Editor {
    get {return _editor ?? Bucketeer_Event_Domain_Editor()}
    set {_editor = newValue}
  }
  /// Returns true if `editor` has been explicitly set.
  var hasEditor: Bool {return self._editor != nil}
  /// Clears the value of `editor`. Subsequent reads from it will return its default value.
  mutating func clearEditor() {self._editor = nil}

  var data: SwiftProtobuf.Google_Protobuf_Any {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var environmentNamespace: String = String()

  /// if true, it's stored in AdminDomainEvent table
  var isAdminEvent: Bool = false

  /// and AdminAuditLog table.
  var options: Bucketeer_Event_Domain_Options {
    get {return _options ?? Bucketeer_Event_Domain_Options()}
    set {_options = newValue}
  }
  /// Returns true if `options` has been explicitly set.
  var hasOptions: Bool {return self._options != nil}
  /// Clears the value of `options`. Subsequent reads from it will return its default value.
  mutating func clearOptions() {self._options = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum EntityType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case feature // = 0
    case goal // = 1
    case experiment // = 2
    case account // = 3
    case apikey // = 4
    case segment // = 5
    case environment // = 6
    case adminAccount // = 7
    case autoopsRule // = 8
    case push // = 9
    case subscription // = 10
    case adminSubscription // = 11
    case UNRECOGNIZED(Int)

    init() {
      self = .feature
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .feature
      case 1: self = .goal
      case 2: self = .experiment
      case 3: self = .account
      case 4: self = .apikey
      case 5: self = .segment
      case 6: self = .environment
      case 7: self = .adminAccount
      case 8: self = .autoopsRule
      case 9: self = .push
      case 10: self = .subscription
      case 11: self = .adminSubscription
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .feature: return 0
      case .goal: return 1
      case .experiment: return 2
      case .account: return 3
      case .apikey: return 4
      case .segment: return 5
      case .environment: return 6
      case .adminAccount: return 7
      case .autoopsRule: return 8
      case .push: return 9
      case .subscription: return 10
      case .adminSubscription: return 11
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case featureCreated // = 1
    case featureRenamed // = 2
    case featureEnabled // = 3
    case featureDisabled // = 4
    case featureDeleted // = 5
    case featureEvaluationDelayableSet // = 6
    case featureEvaluationUndelayableSet // = 7
    case featureDescriptionChanged // = 8
    case featureVariationAdded // = 9
    case featureVariationRemoved // = 10
    case featureOffVariationChanged // = 11
    case variationValueChanged // = 12
    case variationNameChanged // = 13
    case variationDescriptionChanged // = 14
    case variationUserAdded // = 15
    case variationUserRemoved // = 16
    case featureRuleAdded // = 17
    case featureRuleStrategyChanged // = 18
    case featureRuleDeleted // = 19
    case ruleClauseAdded // = 20
    case ruleClauseDeleted // = 21
    case ruleFixedStrategyChanged // = 22
    case ruleRolloutStrategyChanged // = 23
    case clauseAttributeChanged // = 24
    case clauseOperatorChanged // = 25
    case clauseValueAdded // = 26
    case clauseValueRemoved // = 27
    case featureDefaultStrategyChanged // = 28
    case featureTagAdded // = 29
    case featureTagRemoved // = 30
    case featureVersionIncremented // = 31
    case goalCreated // = 100
    case goalRenamed // = 101
    case goalDescriptionChanged // = 102
    case goalDeleted // = 103
    case experimentCreated // = 200
    case experimentStopped // = 201
    case experimentStartAtChanged // = 202
    case experimentStopAtChanged // = 203
    case experimentDeleted // = 204
    case experimentPeriodChanged // = 205
    case experimentNameChanged // = 206
    case experimentDescriptionChanged // = 207
    case experimentStarted // = 208
    case experimentFinished // = 209
    case accountCreated // = 300
    case accountRoleChanged // = 301
    case accountEnabled // = 302
    case accountDisabled // = 303
    case accountDeleted // = 304
    case apikeyCreated // = 400
    case apikeyNameChanged // = 401
    case apikeyEnabled // = 402
    case apikeyDisabled // = 403
    case segmentCreated // = 500
    case segmentDeleted // = 501
    case segmentNameChanged // = 502
    case segmentDescriptionChanged // = 503
    case segmentRuleAdded // = 504
    case segmentRuleDeleted // = 505
    case segmentRuleClauseAdded // = 506
    case segmentRuleClauseDeleted // = 507
    case segmentClauseAttributeChanged // = 508
    case segmentClauseOperatorChanged // = 509
    case segmentClauseValueAdded // = 510
    case segmentClauseValueRemoved // = 511
    case segmentUserAdded // = 512
    case segmentUserDeleted // = 513
    case segmentBulkUploadUsers // = 514
    case segmentBulkUploadUsersStatusChanged // = 515
    case environmentCreated // = 600
    case environmentRenamed // = 601
    case environmentDescriptionChanged // = 602
    case environmentDeleted // = 603
    case adminAccountCreated // = 700
    case adminAccountEnabled // = 702
    case adminAccountDisabled // = 703
    case autoopsRuleCreated // = 800
    case autoopsRuleDeleted // = 801
    case autoopsRuleOpsTypeChanged // = 802
    case autoopsRuleClauseDeleted // = 803
    case autoopsRuleTriggeredAtChanged // = 804
    case opsEventRateClauseAdded // = 805
    case opsEventRateClauseChanged // = 806
    case datetimeClauseAdded // = 807
    case datetimeClauseChanged // = 808
    case pushCreated // = 900
    case pushDeleted // = 901
    case pushTagsAdded // = 902
    case pushTagsDeleted // = 903
    case pushRenamed // = 904
    case subscriptionCreated // = 1000
    case subscriptionDeleted // = 1001
    case subscriptionEnabled // = 1002
    case subscriptionDisabled // = 1003
    case subscriptionSourceTypeAdded // = 1004
    case subscriptionSourceTypeDeleted // = 1005
    case subscriptionRenamed // = 1006
    case adminSubscriptionCreated // = 1100
    case adminSubscriptionDeleted // = 1101
    case adminSubscriptionEnabled // = 1102
    case adminSubscriptionDisabled // = 1103
    case adminSubscriptionSourceTypeAdded // = 1104
    case adminSubscriptionSourceTypeDeleted // = 1105
    case adminSubscriptionRenamed // = 1106
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .featureCreated
      case 2: self = .featureRenamed
      case 3: self = .featureEnabled
      case 4: self = .featureDisabled
      case 5: self = .featureDeleted
      case 6: self = .featureEvaluationDelayableSet
      case 7: self = .featureEvaluationUndelayableSet
      case 8: self = .featureDescriptionChanged
      case 9: self = .featureVariationAdded
      case 10: self = .featureVariationRemoved
      case 11: self = .featureOffVariationChanged
      case 12: self = .variationValueChanged
      case 13: self = .variationNameChanged
      case 14: self = .variationDescriptionChanged
      case 15: self = .variationUserAdded
      case 16: self = .variationUserRemoved
      case 17: self = .featureRuleAdded
      case 18: self = .featureRuleStrategyChanged
      case 19: self = .featureRuleDeleted
      case 20: self = .ruleClauseAdded
      case 21: self = .ruleClauseDeleted
      case 22: self = .ruleFixedStrategyChanged
      case 23: self = .ruleRolloutStrategyChanged
      case 24: self = .clauseAttributeChanged
      case 25: self = .clauseOperatorChanged
      case 26: self = .clauseValueAdded
      case 27: self = .clauseValueRemoved
      case 28: self = .featureDefaultStrategyChanged
      case 29: self = .featureTagAdded
      case 30: self = .featureTagRemoved
      case 31: self = .featureVersionIncremented
      case 100: self = .goalCreated
      case 101: self = .goalRenamed
      case 102: self = .goalDescriptionChanged
      case 103: self = .goalDeleted
      case 200: self = .experimentCreated
      case 201: self = .experimentStopped
      case 202: self = .experimentStartAtChanged
      case 203: self = .experimentStopAtChanged
      case 204: self = .experimentDeleted
      case 205: self = .experimentPeriodChanged
      case 206: self = .experimentNameChanged
      case 207: self = .experimentDescriptionChanged
      case 208: self = .experimentStarted
      case 209: self = .experimentFinished
      case 300: self = .accountCreated
      case 301: self = .accountRoleChanged
      case 302: self = .accountEnabled
      case 303: self = .accountDisabled
      case 304: self = .accountDeleted
      case 400: self = .apikeyCreated
      case 401: self = .apikeyNameChanged
      case 402: self = .apikeyEnabled
      case 403: self = .apikeyDisabled
      case 500: self = .segmentCreated
      case 501: self = .segmentDeleted
      case 502: self = .segmentNameChanged
      case 503: self = .segmentDescriptionChanged
      case 504: self = .segmentRuleAdded
      case 505: self = .segmentRuleDeleted
      case 506: self = .segmentRuleClauseAdded
      case 507: self = .segmentRuleClauseDeleted
      case 508: self = .segmentClauseAttributeChanged
      case 509: self = .segmentClauseOperatorChanged
      case 510: self = .segmentClauseValueAdded
      case 511: self = .segmentClauseValueRemoved
      case 512: self = .segmentUserAdded
      case 513: self = .segmentUserDeleted
      case 514: self = .segmentBulkUploadUsers
      case 515: self = .segmentBulkUploadUsersStatusChanged
      case 600: self = .environmentCreated
      case 601: self = .environmentRenamed
      case 602: self = .environmentDescriptionChanged
      case 603: self = .environmentDeleted
      case 700: self = .adminAccountCreated
      case 702: self = .adminAccountEnabled
      case 703: self = .adminAccountDisabled
      case 800: self = .autoopsRuleCreated
      case 801: self = .autoopsRuleDeleted
      case 802: self = .autoopsRuleOpsTypeChanged
      case 803: self = .autoopsRuleClauseDeleted
      case 804: self = .autoopsRuleTriggeredAtChanged
      case 805: self = .opsEventRateClauseAdded
      case 806: self = .opsEventRateClauseChanged
      case 807: self = .datetimeClauseAdded
      case 808: self = .datetimeClauseChanged
      case 900: self = .pushCreated
      case 901: self = .pushDeleted
      case 902: self = .pushTagsAdded
      case 903: self = .pushTagsDeleted
      case 904: self = .pushRenamed
      case 1000: self = .subscriptionCreated
      case 1001: self = .subscriptionDeleted
      case 1002: self = .subscriptionEnabled
      case 1003: self = .subscriptionDisabled
      case 1004: self = .subscriptionSourceTypeAdded
      case 1005: self = .subscriptionSourceTypeDeleted
      case 1006: self = .subscriptionRenamed
      case 1100: self = .adminSubscriptionCreated
      case 1101: self = .adminSubscriptionDeleted
      case 1102: self = .adminSubscriptionEnabled
      case 1103: self = .adminSubscriptionDisabled
      case 1104: self = .adminSubscriptionSourceTypeAdded
      case 1105: self = .adminSubscriptionSourceTypeDeleted
      case 1106: self = .adminSubscriptionRenamed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .featureCreated: return 1
      case .featureRenamed: return 2
      case .featureEnabled: return 3
      case .featureDisabled: return 4
      case .featureDeleted: return 5
      case .featureEvaluationDelayableSet: return 6
      case .featureEvaluationUndelayableSet: return 7
      case .featureDescriptionChanged: return 8
      case .featureVariationAdded: return 9
      case .featureVariationRemoved: return 10
      case .featureOffVariationChanged: return 11
      case .variationValueChanged: return 12
      case .variationNameChanged: return 13
      case .variationDescriptionChanged: return 14
      case .variationUserAdded: return 15
      case .variationUserRemoved: return 16
      case .featureRuleAdded: return 17
      case .featureRuleStrategyChanged: return 18
      case .featureRuleDeleted: return 19
      case .ruleClauseAdded: return 20
      case .ruleClauseDeleted: return 21
      case .ruleFixedStrategyChanged: return 22
      case .ruleRolloutStrategyChanged: return 23
      case .clauseAttributeChanged: return 24
      case .clauseOperatorChanged: return 25
      case .clauseValueAdded: return 26
      case .clauseValueRemoved: return 27
      case .featureDefaultStrategyChanged: return 28
      case .featureTagAdded: return 29
      case .featureTagRemoved: return 30
      case .featureVersionIncremented: return 31
      case .goalCreated: return 100
      case .goalRenamed: return 101
      case .goalDescriptionChanged: return 102
      case .goalDeleted: return 103
      case .experimentCreated: return 200
      case .experimentStopped: return 201
      case .experimentStartAtChanged: return 202
      case .experimentStopAtChanged: return 203
      case .experimentDeleted: return 204
      case .experimentPeriodChanged: return 205
      case .experimentNameChanged: return 206
      case .experimentDescriptionChanged: return 207
      case .experimentStarted: return 208
      case .experimentFinished: return 209
      case .accountCreated: return 300
      case .accountRoleChanged: return 301
      case .accountEnabled: return 302
      case .accountDisabled: return 303
      case .accountDeleted: return 304
      case .apikeyCreated: return 400
      case .apikeyNameChanged: return 401
      case .apikeyEnabled: return 402
      case .apikeyDisabled: return 403
      case .segmentCreated: return 500
      case .segmentDeleted: return 501
      case .segmentNameChanged: return 502
      case .segmentDescriptionChanged: return 503
      case .segmentRuleAdded: return 504
      case .segmentRuleDeleted: return 505
      case .segmentRuleClauseAdded: return 506
      case .segmentRuleClauseDeleted: return 507
      case .segmentClauseAttributeChanged: return 508
      case .segmentClauseOperatorChanged: return 509
      case .segmentClauseValueAdded: return 510
      case .segmentClauseValueRemoved: return 511
      case .segmentUserAdded: return 512
      case .segmentUserDeleted: return 513
      case .segmentBulkUploadUsers: return 514
      case .segmentBulkUploadUsersStatusChanged: return 515
      case .environmentCreated: return 600
      case .environmentRenamed: return 601
      case .environmentDescriptionChanged: return 602
      case .environmentDeleted: return 603
      case .adminAccountCreated: return 700
      case .adminAccountEnabled: return 702
      case .adminAccountDisabled: return 703
      case .autoopsRuleCreated: return 800
      case .autoopsRuleDeleted: return 801
      case .autoopsRuleOpsTypeChanged: return 802
      case .autoopsRuleClauseDeleted: return 803
      case .autoopsRuleTriggeredAtChanged: return 804
      case .opsEventRateClauseAdded: return 805
      case .opsEventRateClauseChanged: return 806
      case .datetimeClauseAdded: return 807
      case .datetimeClauseChanged: return 808
      case .pushCreated: return 900
      case .pushDeleted: return 901
      case .pushTagsAdded: return 902
      case .pushTagsDeleted: return 903
      case .pushRenamed: return 904
      case .subscriptionCreated: return 1000
      case .subscriptionDeleted: return 1001
      case .subscriptionEnabled: return 1002
      case .subscriptionDisabled: return 1003
      case .subscriptionSourceTypeAdded: return 1004
      case .subscriptionSourceTypeDeleted: return 1005
      case .subscriptionRenamed: return 1006
      case .adminSubscriptionCreated: return 1100
      case .adminSubscriptionDeleted: return 1101
      case .adminSubscriptionEnabled: return 1102
      case .adminSubscriptionDisabled: return 1103
      case .adminSubscriptionSourceTypeAdded: return 1104
      case .adminSubscriptionSourceTypeDeleted: return 1105
      case .adminSubscriptionRenamed: return 1106
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _editor: Bucketeer_Event_Domain_Editor? = nil
  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _options: Bucketeer_Event_Domain_Options? = nil
}

#if swift(>=4.2)

extension Bucketeer_Event_Domain_Event.EntityType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bucketeer_Event_Domain_Event.EntityType] = [
    .feature,
    .goal,
    .experiment,
    .account,
    .apikey,
    .segment,
    .environment,
    .adminAccount,
    .autoopsRule,
    .push,
    .subscription,
    .adminSubscription,
  ]
}

extension Bucketeer_Event_Domain_Event.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bucketeer_Event_Domain_Event.TypeEnum] = [
    .unknown,
    .featureCreated,
    .featureRenamed,
    .featureEnabled,
    .featureDisabled,
    .featureDeleted,
    .featureEvaluationDelayableSet,
    .featureEvaluationUndelayableSet,
    .featureDescriptionChanged,
    .featureVariationAdded,
    .featureVariationRemoved,
    .featureOffVariationChanged,
    .variationValueChanged,
    .variationNameChanged,
    .variationDescriptionChanged,
    .variationUserAdded,
    .variationUserRemoved,
    .featureRuleAdded,
    .featureRuleStrategyChanged,
    .featureRuleDeleted,
    .ruleClauseAdded,
    .ruleClauseDeleted,
    .ruleFixedStrategyChanged,
    .ruleRolloutStrategyChanged,
    .clauseAttributeChanged,
    .clauseOperatorChanged,
    .clauseValueAdded,
    .clauseValueRemoved,
    .featureDefaultStrategyChanged,
    .featureTagAdded,
    .featureTagRemoved,
    .featureVersionIncremented,
    .goalCreated,
    .goalRenamed,
    .goalDescriptionChanged,
    .goalDeleted,
    .experimentCreated,
    .experimentStopped,
    .experimentStartAtChanged,
    .experimentStopAtChanged,
    .experimentDeleted,
    .experimentPeriodChanged,
    .experimentNameChanged,
    .experimentDescriptionChanged,
    .experimentStarted,
    .experimentFinished,
    .accountCreated,
    .accountRoleChanged,
    .accountEnabled,
    .accountDisabled,
    .accountDeleted,
    .apikeyCreated,
    .apikeyNameChanged,
    .apikeyEnabled,
    .apikeyDisabled,
    .segmentCreated,
    .segmentDeleted,
    .segmentNameChanged,
    .segmentDescriptionChanged,
    .segmentRuleAdded,
    .segmentRuleDeleted,
    .segmentRuleClauseAdded,
    .segmentRuleClauseDeleted,
    .segmentClauseAttributeChanged,
    .segmentClauseOperatorChanged,
    .segmentClauseValueAdded,
    .segmentClauseValueRemoved,
    .segmentUserAdded,
    .segmentUserDeleted,
    .segmentBulkUploadUsers,
    .segmentBulkUploadUsersStatusChanged,
    .environmentCreated,
    .environmentRenamed,
    .environmentDescriptionChanged,
    .environmentDeleted,
    .adminAccountCreated,
    .adminAccountEnabled,
    .adminAccountDisabled,
    .autoopsRuleCreated,
    .autoopsRuleDeleted,
    .autoopsRuleOpsTypeChanged,
    .autoopsRuleClauseDeleted,
    .autoopsRuleTriggeredAtChanged,
    .opsEventRateClauseAdded,
    .opsEventRateClauseChanged,
    .datetimeClauseAdded,
    .datetimeClauseChanged,
    .pushCreated,
    .pushDeleted,
    .pushTagsAdded,
    .pushTagsDeleted,
    .pushRenamed,
    .subscriptionCreated,
    .subscriptionDeleted,
    .subscriptionEnabled,
    .subscriptionDisabled,
    .subscriptionSourceTypeAdded,
    .subscriptionSourceTypeDeleted,
    .subscriptionRenamed,
    .adminSubscriptionCreated,
    .adminSubscriptionDeleted,
    .adminSubscriptionEnabled,
    .adminSubscriptionDisabled,
    .adminSubscriptionSourceTypeAdded,
    .adminSubscriptionSourceTypeDeleted,
    .adminSubscriptionRenamed,
  ]
}

#endif  // swift(>=4.2)

struct Bucketeer_Event_Domain_Editor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var email: String = String()

  var role: Bucketeer_Account_Account.Role = .viewer

  var isAdmin: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_Options {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var comment: String = String()

  var newVersion: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_FeatureCreatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var description_p: String = String()

  var user: String = String()

  var variations: [Bucketeer_Feature_Variation] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_FeatureEnabledEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_FeatureDisabledEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_FeatureDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_EvaluationDelayableSetEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_EvaluationUndelayableSetEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_FeatureRenamedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_FeatureDescriptionChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_FeatureOffVariationChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var offVariation: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_FeatureVariationAddedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var variation: Bucketeer_Feature_Variation {
    get {return _variation ?? Bucketeer_Feature_Variation()}
    set {_variation = newValue}
  }
  /// Returns true if `variation` has been explicitly set.
  var hasVariation: Bool {return self._variation != nil}
  /// Clears the value of `variation`. Subsequent reads from it will return its default value.
  mutating func clearVariation() {self._variation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _variation: Bucketeer_Feature_Variation? = nil
}

struct Bucketeer_Event_Domain_FeatureVariationRemovedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var variationID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_VariationValueChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureID: String = String()

  var id: String = String()

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_VariationNameChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureID: String = String()

  var id: String = String()

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_VariationDescriptionChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureID: String = String()

  var id: String = String()

  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_VariationUserAddedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureID: String = String()

  var id: String = String()

  var user: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_VariationUserRemovedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureID: String = String()

  var id: String = String()

  var user: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_FeatureRuleAddedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var rule: Bucketeer_Feature_Rule {
    get {return _rule ?? Bucketeer_Feature_Rule()}
    set {_rule = newValue}
  }
  /// Returns true if `rule` has been explicitly set.
  var hasRule: Bool {return self._rule != nil}
  /// Clears the value of `rule`. Subsequent reads from it will return its default value.
  mutating func clearRule() {self._rule = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rule: Bucketeer_Feature_Rule? = nil
}

struct Bucketeer_Event_Domain_FeatureChangeRuleStrategyEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureID: String = String()

  var ruleID: String = String()

  var strategy: Bucketeer_Feature_Strategy {
    get {return _strategy ?? Bucketeer_Feature_Strategy()}
    set {_strategy = newValue}
  }
  /// Returns true if `strategy` has been explicitly set.
  var hasStrategy: Bool {return self._strategy != nil}
  /// Clears the value of `strategy`. Subsequent reads from it will return its default value.
  mutating func clearStrategy() {self._strategy = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _strategy: Bucketeer_Feature_Strategy? = nil
}

struct Bucketeer_Event_Domain_FeatureRuleDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var ruleID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_FeatureFixedStrategyChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureID: String = String()

  var ruleID: String = String()

  var strategy: Bucketeer_Feature_FixedStrategy {
    get {return _strategy ?? Bucketeer_Feature_FixedStrategy()}
    set {_strategy = newValue}
  }
  /// Returns true if `strategy` has been explicitly set.
  var hasStrategy: Bool {return self._strategy != nil}
  /// Clears the value of `strategy`. Subsequent reads from it will return its default value.
  mutating func clearStrategy() {self._strategy = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _strategy: Bucketeer_Feature_FixedStrategy? = nil
}

struct Bucketeer_Event_Domain_FeatureRolloutStrategyChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureID: String = String()

  var ruleID: String = String()

  var strategy: Bucketeer_Feature_RolloutStrategy {
    get {return _strategy ?? Bucketeer_Feature_RolloutStrategy()}
    set {_strategy = newValue}
  }
  /// Returns true if `strategy` has been explicitly set.
  var hasStrategy: Bool {return self._strategy != nil}
  /// Clears the value of `strategy`. Subsequent reads from it will return its default value.
  mutating func clearStrategy() {self._strategy = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _strategy: Bucketeer_Feature_RolloutStrategy? = nil
}

struct Bucketeer_Event_Domain_RuleClauseAddedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureID: String = String()

  var ruleID: String = String()

  var clause: Bucketeer_Feature_Clause {
    get {return _clause ?? Bucketeer_Feature_Clause()}
    set {_clause = newValue}
  }
  /// Returns true if `clause` has been explicitly set.
  var hasClause: Bool {return self._clause != nil}
  /// Clears the value of `clause`. Subsequent reads from it will return its default value.
  mutating func clearClause() {self._clause = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _clause: Bucketeer_Feature_Clause? = nil
}

struct Bucketeer_Event_Domain_RuleClauseDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureID: String = String()

  var ruleID: String = String()

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_ClauseAttributeChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureID: String = String()

  var ruleID: String = String()

  var id: String = String()

  var attribute: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_ClauseOperatorChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureID: String = String()

  var ruleID: String = String()

  var id: String = String()

  var `operator`: Bucketeer_Feature_Clause.Operator = .equals

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_ClauseValueAddedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureID: String = String()

  var ruleID: String = String()

  var id: String = String()

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_ClauseValueRemovedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureID: String = String()

  var ruleID: String = String()

  var id: String = String()

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_FeatureDefaultStrategyChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var strategy: Bucketeer_Feature_Strategy {
    get {return _strategy ?? Bucketeer_Feature_Strategy()}
    set {_strategy = newValue}
  }
  /// Returns true if `strategy` has been explicitly set.
  var hasStrategy: Bool {return self._strategy != nil}
  /// Clears the value of `strategy`. Subsequent reads from it will return its default value.
  mutating func clearStrategy() {self._strategy = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _strategy: Bucketeer_Feature_Strategy? = nil
}

struct Bucketeer_Event_Domain_FeatureTagAddedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var tag: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_FeatureTagRemovedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var tag: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_FeatureVersionIncrementedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var version: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_GoalCreatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var description_p: String = String()

  var deleted: Bool = false

  var createdAt: Int64 = 0

  var updatedAt: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_GoalRenamedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_GoalDescriptionChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_GoalDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_ExperimentCreatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var featureID: String = String()

  var featureVersion: Int32 = 0

  var variations: [Bucketeer_Feature_Variation] = []

  var goalID: String = String()

  var startAt: Int64 = 0

  var stopAt: Int64 = 0

  var stopped: Bool = false

  var stoppedAt: Int64 = 0

  var createdAt: Int64 = 0

  var updatedAt: Int64 = 0

  var goalIds: [String] = []

  var name: String = String()

  var description_p: String = String()

  var baseVariationID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_ExperimentStoppedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var stoppedAt: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_ExperimentDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_ExperimentStartAtChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var startAt: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_ExperimentStopAtChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var stopAt: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_ExperimentPeriodChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var startAt: Int64 = 0

  var stopAt: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_ExperimentNameChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_ExperimentDescriptionChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_ExperimentStartedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_ExperimentFinishedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AccountCreatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var email: String = String()

  var name: String = String()

  var role: Bucketeer_Account_Account.Role = .viewer

  var disabled: Bool = false

  var createdAt: Int64 = 0

  var updatedAt: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AccountRoleChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var role: Bucketeer_Account_Account.Role = .viewer

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AccountEnabledEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AccountDisabledEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AccountDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_APIKeyCreatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var role: Bucketeer_Account_APIKey.Role = .sdk

  var disabled: Bool = false

  var createdAt: Int64 = 0

  var updatedAt: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_APIKeyNameChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_APIKeyEnabledEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_APIKeyDisabledEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SegmentCreatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SegmentDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SegmentNameChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SegmentDescriptionChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SegmentRuleAddedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var rule: Bucketeer_Feature_Rule {
    get {return _rule ?? Bucketeer_Feature_Rule()}
    set {_rule = newValue}
  }
  /// Returns true if `rule` has been explicitly set.
  var hasRule: Bool {return self._rule != nil}
  /// Clears the value of `rule`. Subsequent reads from it will return its default value.
  mutating func clearRule() {self._rule = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rule: Bucketeer_Feature_Rule? = nil
}

struct Bucketeer_Event_Domain_SegmentRuleDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var ruleID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SegmentRuleClauseAddedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var segmentID: String = String()

  var ruleID: String = String()

  var clause: Bucketeer_Feature_Clause {
    get {return _clause ?? Bucketeer_Feature_Clause()}
    set {_clause = newValue}
  }
  /// Returns true if `clause` has been explicitly set.
  var hasClause: Bool {return self._clause != nil}
  /// Clears the value of `clause`. Subsequent reads from it will return its default value.
  mutating func clearClause() {self._clause = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _clause: Bucketeer_Feature_Clause? = nil
}

struct Bucketeer_Event_Domain_SegmentRuleClauseDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var segmentID: String = String()

  var ruleID: String = String()

  var clauseID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SegmentClauseAttributeChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var segmentID: String = String()

  var ruleID: String = String()

  var clauseID: String = String()

  var attribute: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SegmentClauseOperatorChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var segmentID: String = String()

  var ruleID: String = String()

  var clauseID: String = String()

  var `operator`: Bucketeer_Feature_Clause.Operator = .equals

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SegmentClauseValueAddedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var segmentID: String = String()

  var ruleID: String = String()

  var clauseID: String = String()

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SegmentClauseValueRemovedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var segmentID: String = String()

  var ruleID: String = String()

  var clauseID: String = String()

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SegmentUserAddedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var segmentID: String = String()

  var userIds: [String] = []

  var state: Bucketeer_Feature_SegmentUser.State = .included

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SegmentUserDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var segmentID: String = String()

  var userIds: [String] = []

  var state: Bucketeer_Feature_SegmentUser.State = .included

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SegmentBulkUploadUsersEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var segmentID: String = String()

  var status: Bucketeer_Feature_Segment.Status = .initial

  var state: Bucketeer_Feature_SegmentUser.State = .included

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SegmentBulkUploadUsersStatusChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var segmentID: String = String()

  var status: Bucketeer_Feature_Segment.Status = .initial

  var state: Bucketeer_Feature_SegmentUser.State = .included

  var count: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_EnvironmentCreatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var namespace: String = String()

  var name: String = String()

  var description_p: String = String()

  var deleted: Bool = false

  var createdAt: Int64 = 0

  var updatedAt: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_EnvironmentRenamedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_EnvironmentDescriptionChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_EnvironmentDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AdminAccountCreatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var email: String = String()

  var name: String = String()

  var role: Bucketeer_Account_Account.Role = .viewer

  var disabled: Bool = false

  var createdAt: Int64 = 0

  var updatedAt: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AdminAccountEnabledEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AdminAccountDisabledEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AdminAccountDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AutoOpsRuleCreatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureID: String = String()

  var opsType: Bucketeer_Autoops_OpsType = .enableFeature

  var clauses: [Bucketeer_Autoops_Clause] = []

  var triggeredAt: Int64 = 0

  var createdAt: Int64 = 0

  var updatedAt: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AutoOpsRuleDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AutoOpsRuleOpsTypeChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var opsType: Bucketeer_Autoops_OpsType = .enableFeature

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AutoOpsRuleTriggeredAtChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_OpsEventRateClauseAddedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clauseID: String = String()

  var opsEventRateClause: Bucketeer_Autoops_OpsEventRateClause {
    get {return _opsEventRateClause ?? Bucketeer_Autoops_OpsEventRateClause()}
    set {_opsEventRateClause = newValue}
  }
  /// Returns true if `opsEventRateClause` has been explicitly set.
  var hasOpsEventRateClause: Bool {return self._opsEventRateClause != nil}
  /// Clears the value of `opsEventRateClause`. Subsequent reads from it will return its default value.
  mutating func clearOpsEventRateClause() {self._opsEventRateClause = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _opsEventRateClause: Bucketeer_Autoops_OpsEventRateClause? = nil
}

struct Bucketeer_Event_Domain_OpsEventRateClauseChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clauseID: String = String()

  var opsEventRateClause: Bucketeer_Autoops_OpsEventRateClause {
    get {return _opsEventRateClause ?? Bucketeer_Autoops_OpsEventRateClause()}
    set {_opsEventRateClause = newValue}
  }
  /// Returns true if `opsEventRateClause` has been explicitly set.
  var hasOpsEventRateClause: Bool {return self._opsEventRateClause != nil}
  /// Clears the value of `opsEventRateClause`. Subsequent reads from it will return its default value.
  mutating func clearOpsEventRateClause() {self._opsEventRateClause = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _opsEventRateClause: Bucketeer_Autoops_OpsEventRateClause? = nil
}

struct Bucketeer_Event_Domain_AutoOpsRuleClauseDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clauseID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_DatetimeClauseAddedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clauseID: String = String()

  var datetimeClause: Bucketeer_Autoops_DatetimeClause {
    get {return _datetimeClause ?? Bucketeer_Autoops_DatetimeClause()}
    set {_datetimeClause = newValue}
  }
  /// Returns true if `datetimeClause` has been explicitly set.
  var hasDatetimeClause: Bool {return self._datetimeClause != nil}
  /// Clears the value of `datetimeClause`. Subsequent reads from it will return its default value.
  mutating func clearDatetimeClause() {self._datetimeClause = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _datetimeClause: Bucketeer_Autoops_DatetimeClause? = nil
}

struct Bucketeer_Event_Domain_DatetimeClauseChangedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clauseID: String = String()

  var datetimeClause: Bucketeer_Autoops_DatetimeClause {
    get {return _datetimeClause ?? Bucketeer_Autoops_DatetimeClause()}
    set {_datetimeClause = newValue}
  }
  /// Returns true if `datetimeClause` has been explicitly set.
  var hasDatetimeClause: Bool {return self._datetimeClause != nil}
  /// Clears the value of `datetimeClause`. Subsequent reads from it will return its default value.
  mutating func clearDatetimeClause() {self._datetimeClause = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _datetimeClause: Bucketeer_Autoops_DatetimeClause? = nil
}

struct Bucketeer_Event_Domain_PushCreatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fcmApiKey: String = String()

  var tags: [String] = []

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_PushDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_PushTagsAddedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tags: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_PushTagsDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tags: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_PushRenamedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SubscriptionCreatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sourceTypes: [Bucketeer_Notification_Subscription.SourceType] = []

  var recipient: Bucketeer_Notification_Recipient {
    get {return _recipient ?? Bucketeer_Notification_Recipient()}
    set {_recipient = newValue}
  }
  /// Returns true if `recipient` has been explicitly set.
  var hasRecipient: Bool {return self._recipient != nil}
  /// Clears the value of `recipient`. Subsequent reads from it will return its default value.
  mutating func clearRecipient() {self._recipient = nil}

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _recipient: Bucketeer_Notification_Recipient? = nil
}

struct Bucketeer_Event_Domain_SubscriptionDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SubscriptionEnabledEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SubscriptionDisabledEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SubscriptionSourceTypesAddedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sourceTypes: [Bucketeer_Notification_Subscription.SourceType] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SubscriptionSourceTypesDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sourceTypes: [Bucketeer_Notification_Subscription.SourceType] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_SubscriptionRenamedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AdminSubscriptionCreatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sourceTypes: [Bucketeer_Notification_Subscription.SourceType] = []

  var recipient: Bucketeer_Notification_Recipient {
    get {return _recipient ?? Bucketeer_Notification_Recipient()}
    set {_recipient = newValue}
  }
  /// Returns true if `recipient` has been explicitly set.
  var hasRecipient: Bool {return self._recipient != nil}
  /// Clears the value of `recipient`. Subsequent reads from it will return its default value.
  mutating func clearRecipient() {self._recipient = nil}

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _recipient: Bucketeer_Notification_Recipient? = nil
}

struct Bucketeer_Event_Domain_AdminSubscriptionDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AdminSubscriptionEnabledEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AdminSubscriptionDisabledEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AdminSubscriptionSourceTypesAddedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sourceTypes: [Bucketeer_Notification_Subscription.SourceType] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AdminSubscriptionSourceTypesDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sourceTypes: [Bucketeer_Notification_Subscription.SourceType] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Event_Domain_AdminSubscriptionRenamedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.event.domain"

extension Bucketeer_Event_Domain_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Event"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "timestamp"),
    3: .standard(proto: "entity_type"),
    4: .standard(proto: "entity_id"),
    5: .same(proto: "type"),
    6: .same(proto: "editor"),
    7: .same(proto: "data"),
    8: .standard(proto: "environment_namespace"),
    9: .standard(proto: "is_admin_event"),
    10: .same(proto: "options"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      case 3: try decoder.decodeSingularEnumField(value: &self.entityType)
      case 4: try decoder.decodeSingularStringField(value: &self.entityID)
      case 5: try decoder.decodeSingularEnumField(value: &self.type)
      case 6: try decoder.decodeSingularMessageField(value: &self._editor)
      case 7: try decoder.decodeSingularMessageField(value: &self._data)
      case 8: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 9: try decoder.decodeSingularBoolField(value: &self.isAdminEvent)
      case 10: try decoder.decodeSingularMessageField(value: &self._options)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 2)
    }
    if self.entityType != .feature {
      try visitor.visitSingularEnumField(value: self.entityType, fieldNumber: 3)
    }
    if !self.entityID.isEmpty {
      try visitor.visitSingularStringField(value: self.entityID, fieldNumber: 4)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 5)
    }
    if let v = self._editor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 8)
    }
    if self.isAdminEvent != false {
      try visitor.visitSingularBoolField(value: self.isAdminEvent, fieldNumber: 9)
    }
    if let v = self._options {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_Event, rhs: Bucketeer_Event_Domain_Event) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.entityType != rhs.entityType {return false}
    if lhs.entityID != rhs.entityID {return false}
    if lhs.type != rhs.type {return false}
    if lhs._editor != rhs._editor {return false}
    if lhs._data != rhs._data {return false}
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.isAdminEvent != rhs.isAdminEvent {return false}
    if lhs._options != rhs._options {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_Event.EntityType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FEATURE"),
    1: .same(proto: "GOAL"),
    2: .same(proto: "EXPERIMENT"),
    3: .same(proto: "ACCOUNT"),
    4: .same(proto: "APIKEY"),
    5: .same(proto: "SEGMENT"),
    6: .same(proto: "ENVIRONMENT"),
    7: .same(proto: "ADMIN_ACCOUNT"),
    8: .same(proto: "AUTOOPS_RULE"),
    9: .same(proto: "PUSH"),
    10: .same(proto: "SUBSCRIPTION"),
    11: .same(proto: "ADMIN_SUBSCRIPTION"),
  ]
}

extension Bucketeer_Event_Domain_Event.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "FEATURE_CREATED"),
    2: .same(proto: "FEATURE_RENAMED"),
    3: .same(proto: "FEATURE_ENABLED"),
    4: .same(proto: "FEATURE_DISABLED"),
    5: .same(proto: "FEATURE_DELETED"),
    6: .same(proto: "FEATURE_EVALUATION_DELAYABLE_SET"),
    7: .same(proto: "FEATURE_EVALUATION_UNDELAYABLE_SET"),
    8: .same(proto: "FEATURE_DESCRIPTION_CHANGED"),
    9: .same(proto: "FEATURE_VARIATION_ADDED"),
    10: .same(proto: "FEATURE_VARIATION_REMOVED"),
    11: .same(proto: "FEATURE_OFF_VARIATION_CHANGED"),
    12: .same(proto: "VARIATION_VALUE_CHANGED"),
    13: .same(proto: "VARIATION_NAME_CHANGED"),
    14: .same(proto: "VARIATION_DESCRIPTION_CHANGED"),
    15: .same(proto: "VARIATION_USER_ADDED"),
    16: .same(proto: "VARIATION_USER_REMOVED"),
    17: .same(proto: "FEATURE_RULE_ADDED"),
    18: .same(proto: "FEATURE_RULE_STRATEGY_CHANGED"),
    19: .same(proto: "FEATURE_RULE_DELETED"),
    20: .same(proto: "RULE_CLAUSE_ADDED"),
    21: .same(proto: "RULE_CLAUSE_DELETED"),
    22: .same(proto: "RULE_FIXED_STRATEGY_CHANGED"),
    23: .same(proto: "RULE_ROLLOUT_STRATEGY_CHANGED"),
    24: .same(proto: "CLAUSE_ATTRIBUTE_CHANGED"),
    25: .same(proto: "CLAUSE_OPERATOR_CHANGED"),
    26: .same(proto: "CLAUSE_VALUE_ADDED"),
    27: .same(proto: "CLAUSE_VALUE_REMOVED"),
    28: .same(proto: "FEATURE_DEFAULT_STRATEGY_CHANGED"),
    29: .same(proto: "FEATURE_TAG_ADDED"),
    30: .same(proto: "FEATURE_TAG_REMOVED"),
    31: .same(proto: "FEATURE_VERSION_INCREMENTED"),
    100: .same(proto: "GOAL_CREATED"),
    101: .same(proto: "GOAL_RENAMED"),
    102: .same(proto: "GOAL_DESCRIPTION_CHANGED"),
    103: .same(proto: "GOAL_DELETED"),
    200: .same(proto: "EXPERIMENT_CREATED"),
    201: .same(proto: "EXPERIMENT_STOPPED"),
    202: .same(proto: "EXPERIMENT_START_AT_CHANGED"),
    203: .same(proto: "EXPERIMENT_STOP_AT_CHANGED"),
    204: .same(proto: "EXPERIMENT_DELETED"),
    205: .same(proto: "EXPERIMENT_PERIOD_CHANGED"),
    206: .same(proto: "EXPERIMENT_NAME_CHANGED"),
    207: .same(proto: "EXPERIMENT_DESCRIPTION_CHANGED"),
    208: .same(proto: "EXPERIMENT_STARTED"),
    209: .same(proto: "EXPERIMENT_FINISHED"),
    300: .same(proto: "ACCOUNT_CREATED"),
    301: .same(proto: "ACCOUNT_ROLE_CHANGED"),
    302: .same(proto: "ACCOUNT_ENABLED"),
    303: .same(proto: "ACCOUNT_DISABLED"),
    304: .same(proto: "ACCOUNT_DELETED"),
    400: .same(proto: "APIKEY_CREATED"),
    401: .same(proto: "APIKEY_NAME_CHANGED"),
    402: .same(proto: "APIKEY_ENABLED"),
    403: .same(proto: "APIKEY_DISABLED"),
    500: .same(proto: "SEGMENT_CREATED"),
    501: .same(proto: "SEGMENT_DELETED"),
    502: .same(proto: "SEGMENT_NAME_CHANGED"),
    503: .same(proto: "SEGMENT_DESCRIPTION_CHANGED"),
    504: .same(proto: "SEGMENT_RULE_ADDED"),
    505: .same(proto: "SEGMENT_RULE_DELETED"),
    506: .same(proto: "SEGMENT_RULE_CLAUSE_ADDED"),
    507: .same(proto: "SEGMENT_RULE_CLAUSE_DELETED"),
    508: .same(proto: "SEGMENT_CLAUSE_ATTRIBUTE_CHANGED"),
    509: .same(proto: "SEGMENT_CLAUSE_OPERATOR_CHANGED"),
    510: .same(proto: "SEGMENT_CLAUSE_VALUE_ADDED"),
    511: .same(proto: "SEGMENT_CLAUSE_VALUE_REMOVED"),
    512: .same(proto: "SEGMENT_USER_ADDED"),
    513: .same(proto: "SEGMENT_USER_DELETED"),
    514: .same(proto: "SEGMENT_BULK_UPLOAD_USERS"),
    515: .same(proto: "SEGMENT_BULK_UPLOAD_USERS_STATUS_CHANGED"),
    600: .same(proto: "ENVIRONMENT_CREATED"),
    601: .same(proto: "ENVIRONMENT_RENAMED"),
    602: .same(proto: "ENVIRONMENT_DESCRIPTION_CHANGED"),
    603: .same(proto: "ENVIRONMENT_DELETED"),
    700: .same(proto: "ADMIN_ACCOUNT_CREATED"),
    702: .same(proto: "ADMIN_ACCOUNT_ENABLED"),
    703: .same(proto: "ADMIN_ACCOUNT_DISABLED"),
    800: .same(proto: "AUTOOPS_RULE_CREATED"),
    801: .same(proto: "AUTOOPS_RULE_DELETED"),
    802: .same(proto: "AUTOOPS_RULE_OPS_TYPE_CHANGED"),
    803: .same(proto: "AUTOOPS_RULE_CLAUSE_DELETED"),
    804: .same(proto: "AUTOOPS_RULE_TRIGGERED_AT_CHANGED"),
    805: .same(proto: "OPS_EVENT_RATE_CLAUSE_ADDED"),
    806: .same(proto: "OPS_EVENT_RATE_CLAUSE_CHANGED"),
    807: .same(proto: "DATETIME_CLAUSE_ADDED"),
    808: .same(proto: "DATETIME_CLAUSE_CHANGED"),
    900: .same(proto: "PUSH_CREATED"),
    901: .same(proto: "PUSH_DELETED"),
    902: .same(proto: "PUSH_TAGS_ADDED"),
    903: .same(proto: "PUSH_TAGS_DELETED"),
    904: .same(proto: "PUSH_RENAMED"),
    1000: .same(proto: "SUBSCRIPTION_CREATED"),
    1001: .same(proto: "SUBSCRIPTION_DELETED"),
    1002: .same(proto: "SUBSCRIPTION_ENABLED"),
    1003: .same(proto: "SUBSCRIPTION_DISABLED"),
    1004: .same(proto: "SUBSCRIPTION_SOURCE_TYPE_ADDED"),
    1005: .same(proto: "SUBSCRIPTION_SOURCE_TYPE_DELETED"),
    1006: .same(proto: "SUBSCRIPTION_RENAMED"),
    1100: .same(proto: "ADMIN_SUBSCRIPTION_CREATED"),
    1101: .same(proto: "ADMIN_SUBSCRIPTION_DELETED"),
    1102: .same(proto: "ADMIN_SUBSCRIPTION_ENABLED"),
    1103: .same(proto: "ADMIN_SUBSCRIPTION_DISABLED"),
    1104: .same(proto: "ADMIN_SUBSCRIPTION_SOURCE_TYPE_ADDED"),
    1105: .same(proto: "ADMIN_SUBSCRIPTION_SOURCE_TYPE_DELETED"),
    1106: .same(proto: "ADMIN_SUBSCRIPTION_RENAMED"),
  ]
}

extension Bucketeer_Event_Domain_Editor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Editor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "email"),
    2: .same(proto: "role"),
    3: .standard(proto: "is_admin"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.email)
      case 2: try decoder.decodeSingularEnumField(value: &self.role)
      case 3: try decoder.decodeSingularBoolField(value: &self.isAdmin)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 1)
    }
    if self.role != .viewer {
      try visitor.visitSingularEnumField(value: self.role, fieldNumber: 2)
    }
    if self.isAdmin != false {
      try visitor.visitSingularBoolField(value: self.isAdmin, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_Editor, rhs: Bucketeer_Event_Domain_Editor) -> Bool {
    if lhs.email != rhs.email {return false}
    if lhs.role != rhs.role {return false}
    if lhs.isAdmin != rhs.isAdmin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_Options: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Options"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "comment"),
    2: .standard(proto: "new_version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.comment)
      case 2: try decoder.decodeSingularInt32Field(value: &self.newVersion)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.comment.isEmpty {
      try visitor.visitSingularStringField(value: self.comment, fieldNumber: 1)
    }
    if self.newVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.newVersion, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_Options, rhs: Bucketeer_Event_Domain_Options) -> Bool {
    if lhs.comment != rhs.comment {return false}
    if lhs.newVersion != rhs.newVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureCreatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureCreatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "description"),
    4: .same(proto: "user"),
    5: .same(proto: "variations"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      case 4: try decoder.decodeSingularStringField(value: &self.user)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.variations)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 4)
    }
    if !self.variations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.variations, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureCreatedEvent, rhs: Bucketeer_Event_Domain_FeatureCreatedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.user != rhs.user {return false}
    if lhs.variations != rhs.variations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureEnabledEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureEnabledEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureEnabledEvent, rhs: Bucketeer_Event_Domain_FeatureEnabledEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureDisabledEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureDisabledEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureDisabledEvent, rhs: Bucketeer_Event_Domain_FeatureDisabledEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureDeletedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureDeletedEvent, rhs: Bucketeer_Event_Domain_FeatureDeletedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_EvaluationDelayableSetEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EvaluationDelayableSetEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_EvaluationDelayableSetEvent, rhs: Bucketeer_Event_Domain_EvaluationDelayableSetEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_EvaluationUndelayableSetEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EvaluationUndelayableSetEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_EvaluationUndelayableSetEvent, rhs: Bucketeer_Event_Domain_EvaluationUndelayableSetEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureRenamedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureRenamedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureRenamedEvent, rhs: Bucketeer_Event_Domain_FeatureRenamedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureDescriptionChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureDescriptionChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureDescriptionChangedEvent, rhs: Bucketeer_Event_Domain_FeatureDescriptionChangedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureOffVariationChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureOffVariationChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "off_variation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.offVariation)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.offVariation.isEmpty {
      try visitor.visitSingularStringField(value: self.offVariation, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureOffVariationChangedEvent, rhs: Bucketeer_Event_Domain_FeatureOffVariationChangedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.offVariation != rhs.offVariation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureVariationAddedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureVariationAddedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "variation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._variation)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._variation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureVariationAddedEvent, rhs: Bucketeer_Event_Domain_FeatureVariationAddedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._variation != rhs._variation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureVariationRemovedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureVariationRemovedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "variation_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.variationID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.variationID.isEmpty {
      try visitor.visitSingularStringField(value: self.variationID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureVariationRemovedEvent, rhs: Bucketeer_Event_Domain_FeatureVariationRemovedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.variationID != rhs.variationID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_VariationValueChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VariationValueChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_id"),
    2: .same(proto: "id"),
    3: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.featureID)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_VariationValueChangedEvent, rhs: Bucketeer_Event_Domain_VariationValueChangedEvent) -> Bool {
    if lhs.featureID != rhs.featureID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_VariationNameChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VariationNameChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_id"),
    2: .same(proto: "id"),
    3: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.featureID)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_VariationNameChangedEvent, rhs: Bucketeer_Event_Domain_VariationNameChangedEvent) -> Bool {
    if lhs.featureID != rhs.featureID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_VariationDescriptionChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VariationDescriptionChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_id"),
    2: .same(proto: "id"),
    3: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.featureID)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_VariationDescriptionChangedEvent, rhs: Bucketeer_Event_Domain_VariationDescriptionChangedEvent) -> Bool {
    if lhs.featureID != rhs.featureID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_VariationUserAddedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VariationUserAddedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_id"),
    2: .same(proto: "id"),
    3: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.featureID)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularStringField(value: &self.user)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_VariationUserAddedEvent, rhs: Bucketeer_Event_Domain_VariationUserAddedEvent) -> Bool {
    if lhs.featureID != rhs.featureID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_VariationUserRemovedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VariationUserRemovedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_id"),
    2: .same(proto: "id"),
    3: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.featureID)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularStringField(value: &self.user)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_VariationUserRemovedEvent, rhs: Bucketeer_Event_Domain_VariationUserRemovedEvent) -> Bool {
    if lhs.featureID != rhs.featureID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureRuleAddedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureRuleAddedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "rule"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._rule)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._rule {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureRuleAddedEvent, rhs: Bucketeer_Event_Domain_FeatureRuleAddedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._rule != rhs._rule {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureChangeRuleStrategyEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureChangeRuleStrategyEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_id"),
    2: .standard(proto: "rule_id"),
    3: .same(proto: "strategy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.featureID)
      case 2: try decoder.decodeSingularStringField(value: &self.ruleID)
      case 3: try decoder.decodeSingularMessageField(value: &self._strategy)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 1)
    }
    if !self.ruleID.isEmpty {
      try visitor.visitSingularStringField(value: self.ruleID, fieldNumber: 2)
    }
    if let v = self._strategy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureChangeRuleStrategyEvent, rhs: Bucketeer_Event_Domain_FeatureChangeRuleStrategyEvent) -> Bool {
    if lhs.featureID != rhs.featureID {return false}
    if lhs.ruleID != rhs.ruleID {return false}
    if lhs._strategy != rhs._strategy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureRuleDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureRuleDeletedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "rule_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.ruleID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.ruleID.isEmpty {
      try visitor.visitSingularStringField(value: self.ruleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureRuleDeletedEvent, rhs: Bucketeer_Event_Domain_FeatureRuleDeletedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.ruleID != rhs.ruleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureFixedStrategyChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureFixedStrategyChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_id"),
    2: .standard(proto: "rule_id"),
    3: .same(proto: "strategy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.featureID)
      case 2: try decoder.decodeSingularStringField(value: &self.ruleID)
      case 3: try decoder.decodeSingularMessageField(value: &self._strategy)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 1)
    }
    if !self.ruleID.isEmpty {
      try visitor.visitSingularStringField(value: self.ruleID, fieldNumber: 2)
    }
    if let v = self._strategy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureFixedStrategyChangedEvent, rhs: Bucketeer_Event_Domain_FeatureFixedStrategyChangedEvent) -> Bool {
    if lhs.featureID != rhs.featureID {return false}
    if lhs.ruleID != rhs.ruleID {return false}
    if lhs._strategy != rhs._strategy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureRolloutStrategyChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureRolloutStrategyChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_id"),
    2: .standard(proto: "rule_id"),
    3: .same(proto: "strategy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.featureID)
      case 2: try decoder.decodeSingularStringField(value: &self.ruleID)
      case 3: try decoder.decodeSingularMessageField(value: &self._strategy)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 1)
    }
    if !self.ruleID.isEmpty {
      try visitor.visitSingularStringField(value: self.ruleID, fieldNumber: 2)
    }
    if let v = self._strategy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureRolloutStrategyChangedEvent, rhs: Bucketeer_Event_Domain_FeatureRolloutStrategyChangedEvent) -> Bool {
    if lhs.featureID != rhs.featureID {return false}
    if lhs.ruleID != rhs.ruleID {return false}
    if lhs._strategy != rhs._strategy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_RuleClauseAddedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RuleClauseAddedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_id"),
    2: .standard(proto: "rule_id"),
    3: .same(proto: "clause"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.featureID)
      case 2: try decoder.decodeSingularStringField(value: &self.ruleID)
      case 3: try decoder.decodeSingularMessageField(value: &self._clause)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 1)
    }
    if !self.ruleID.isEmpty {
      try visitor.visitSingularStringField(value: self.ruleID, fieldNumber: 2)
    }
    if let v = self._clause {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_RuleClauseAddedEvent, rhs: Bucketeer_Event_Domain_RuleClauseAddedEvent) -> Bool {
    if lhs.featureID != rhs.featureID {return false}
    if lhs.ruleID != rhs.ruleID {return false}
    if lhs._clause != rhs._clause {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_RuleClauseDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RuleClauseDeletedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_id"),
    2: .standard(proto: "rule_id"),
    3: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.featureID)
      case 2: try decoder.decodeSingularStringField(value: &self.ruleID)
      case 3: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 1)
    }
    if !self.ruleID.isEmpty {
      try visitor.visitSingularStringField(value: self.ruleID, fieldNumber: 2)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_RuleClauseDeletedEvent, rhs: Bucketeer_Event_Domain_RuleClauseDeletedEvent) -> Bool {
    if lhs.featureID != rhs.featureID {return false}
    if lhs.ruleID != rhs.ruleID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_ClauseAttributeChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClauseAttributeChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_id"),
    2: .standard(proto: "rule_id"),
    3: .same(proto: "id"),
    4: .same(proto: "attribute"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.featureID)
      case 2: try decoder.decodeSingularStringField(value: &self.ruleID)
      case 3: try decoder.decodeSingularStringField(value: &self.id)
      case 4: try decoder.decodeSingularStringField(value: &self.attribute)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 1)
    }
    if !self.ruleID.isEmpty {
      try visitor.visitSingularStringField(value: self.ruleID, fieldNumber: 2)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 3)
    }
    if !self.attribute.isEmpty {
      try visitor.visitSingularStringField(value: self.attribute, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_ClauseAttributeChangedEvent, rhs: Bucketeer_Event_Domain_ClauseAttributeChangedEvent) -> Bool {
    if lhs.featureID != rhs.featureID {return false}
    if lhs.ruleID != rhs.ruleID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.attribute != rhs.attribute {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_ClauseOperatorChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClauseOperatorChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_id"),
    2: .standard(proto: "rule_id"),
    3: .same(proto: "id"),
    4: .same(proto: "operator"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.featureID)
      case 2: try decoder.decodeSingularStringField(value: &self.ruleID)
      case 3: try decoder.decodeSingularStringField(value: &self.id)
      case 4: try decoder.decodeSingularEnumField(value: &self.`operator`)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 1)
    }
    if !self.ruleID.isEmpty {
      try visitor.visitSingularStringField(value: self.ruleID, fieldNumber: 2)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 3)
    }
    if self.`operator` != .equals {
      try visitor.visitSingularEnumField(value: self.`operator`, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_ClauseOperatorChangedEvent, rhs: Bucketeer_Event_Domain_ClauseOperatorChangedEvent) -> Bool {
    if lhs.featureID != rhs.featureID {return false}
    if lhs.ruleID != rhs.ruleID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.`operator` != rhs.`operator` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_ClauseValueAddedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClauseValueAddedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_id"),
    2: .standard(proto: "rule_id"),
    3: .same(proto: "id"),
    4: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.featureID)
      case 2: try decoder.decodeSingularStringField(value: &self.ruleID)
      case 3: try decoder.decodeSingularStringField(value: &self.id)
      case 4: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 1)
    }
    if !self.ruleID.isEmpty {
      try visitor.visitSingularStringField(value: self.ruleID, fieldNumber: 2)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 3)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_ClauseValueAddedEvent, rhs: Bucketeer_Event_Domain_ClauseValueAddedEvent) -> Bool {
    if lhs.featureID != rhs.featureID {return false}
    if lhs.ruleID != rhs.ruleID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_ClauseValueRemovedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClauseValueRemovedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_id"),
    2: .standard(proto: "rule_id"),
    3: .same(proto: "id"),
    4: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.featureID)
      case 2: try decoder.decodeSingularStringField(value: &self.ruleID)
      case 3: try decoder.decodeSingularStringField(value: &self.id)
      case 4: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 1)
    }
    if !self.ruleID.isEmpty {
      try visitor.visitSingularStringField(value: self.ruleID, fieldNumber: 2)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 3)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_ClauseValueRemovedEvent, rhs: Bucketeer_Event_Domain_ClauseValueRemovedEvent) -> Bool {
    if lhs.featureID != rhs.featureID {return false}
    if lhs.ruleID != rhs.ruleID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureDefaultStrategyChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureDefaultStrategyChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "strategy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._strategy)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._strategy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureDefaultStrategyChangedEvent, rhs: Bucketeer_Event_Domain_FeatureDefaultStrategyChangedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._strategy != rhs._strategy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureTagAddedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureTagAddedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "tag"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.tag)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureTagAddedEvent, rhs: Bucketeer_Event_Domain_FeatureTagAddedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.tag != rhs.tag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureTagRemovedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureTagRemovedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "tag"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.tag)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureTagRemovedEvent, rhs: Bucketeer_Event_Domain_FeatureTagRemovedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.tag != rhs.tag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_FeatureVersionIncrementedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureVersionIncrementedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularInt32Field(value: &self.version)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_FeatureVersionIncrementedEvent, rhs: Bucketeer_Event_Domain_FeatureVersionIncrementedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_GoalCreatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GoalCreatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "description"),
    4: .same(proto: "deleted"),
    5: .standard(proto: "created_at"),
    6: .standard(proto: "updated_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      case 4: try decoder.decodeSingularBoolField(value: &self.deleted)
      case 5: try decoder.decodeSingularInt64Field(value: &self.createdAt)
      case 6: try decoder.decodeSingularInt64Field(value: &self.updatedAt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if self.deleted != false {
      try visitor.visitSingularBoolField(value: self.deleted, fieldNumber: 4)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAt, fieldNumber: 5)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.updatedAt, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_GoalCreatedEvent, rhs: Bucketeer_Event_Domain_GoalCreatedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.deleted != rhs.deleted {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_GoalRenamedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GoalRenamedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_GoalRenamedEvent, rhs: Bucketeer_Event_Domain_GoalRenamedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_GoalDescriptionChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GoalDescriptionChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_GoalDescriptionChangedEvent, rhs: Bucketeer_Event_Domain_GoalDescriptionChangedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_GoalDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GoalDeletedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_GoalDeletedEvent, rhs: Bucketeer_Event_Domain_GoalDeletedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_ExperimentCreatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExperimentCreatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "feature_id"),
    3: .standard(proto: "feature_version"),
    4: .same(proto: "variations"),
    5: .standard(proto: "goal_id"),
    6: .standard(proto: "start_at"),
    7: .standard(proto: "stop_at"),
    8: .same(proto: "stopped"),
    9: .standard(proto: "stopped_at"),
    10: .standard(proto: "created_at"),
    11: .standard(proto: "updated_at"),
    12: .standard(proto: "goal_ids"),
    13: .same(proto: "name"),
    14: .same(proto: "description"),
    15: .standard(proto: "base_variation_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.featureID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.featureVersion)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.variations)
      case 5: try decoder.decodeSingularStringField(value: &self.goalID)
      case 6: try decoder.decodeSingularInt64Field(value: &self.startAt)
      case 7: try decoder.decodeSingularInt64Field(value: &self.stopAt)
      case 8: try decoder.decodeSingularBoolField(value: &self.stopped)
      case 9: try decoder.decodeSingularInt64Field(value: &self.stoppedAt)
      case 10: try decoder.decodeSingularInt64Field(value: &self.createdAt)
      case 11: try decoder.decodeSingularInt64Field(value: &self.updatedAt)
      case 12: try decoder.decodeRepeatedStringField(value: &self.goalIds)
      case 13: try decoder.decodeSingularStringField(value: &self.name)
      case 14: try decoder.decodeSingularStringField(value: &self.description_p)
      case 15: try decoder.decodeSingularStringField(value: &self.baseVariationID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 2)
    }
    if self.featureVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.featureVersion, fieldNumber: 3)
    }
    if !self.variations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.variations, fieldNumber: 4)
    }
    if !self.goalID.isEmpty {
      try visitor.visitSingularStringField(value: self.goalID, fieldNumber: 5)
    }
    if self.startAt != 0 {
      try visitor.visitSingularInt64Field(value: self.startAt, fieldNumber: 6)
    }
    if self.stopAt != 0 {
      try visitor.visitSingularInt64Field(value: self.stopAt, fieldNumber: 7)
    }
    if self.stopped != false {
      try visitor.visitSingularBoolField(value: self.stopped, fieldNumber: 8)
    }
    if self.stoppedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.stoppedAt, fieldNumber: 9)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAt, fieldNumber: 10)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.updatedAt, fieldNumber: 11)
    }
    if !self.goalIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.goalIds, fieldNumber: 12)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 13)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 14)
    }
    if !self.baseVariationID.isEmpty {
      try visitor.visitSingularStringField(value: self.baseVariationID, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_ExperimentCreatedEvent, rhs: Bucketeer_Event_Domain_ExperimentCreatedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.featureID != rhs.featureID {return false}
    if lhs.featureVersion != rhs.featureVersion {return false}
    if lhs.variations != rhs.variations {return false}
    if lhs.goalID != rhs.goalID {return false}
    if lhs.startAt != rhs.startAt {return false}
    if lhs.stopAt != rhs.stopAt {return false}
    if lhs.stopped != rhs.stopped {return false}
    if lhs.stoppedAt != rhs.stoppedAt {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.goalIds != rhs.goalIds {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.baseVariationID != rhs.baseVariationID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_ExperimentStoppedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExperimentStoppedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "stopped_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.stoppedAt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.stoppedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.stoppedAt, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_ExperimentStoppedEvent, rhs: Bucketeer_Event_Domain_ExperimentStoppedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.stoppedAt != rhs.stoppedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_ExperimentDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExperimentDeletedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_ExperimentDeletedEvent, rhs: Bucketeer_Event_Domain_ExperimentDeletedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_ExperimentStartAtChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExperimentStartAtChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "start_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.startAt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.startAt != 0 {
      try visitor.visitSingularInt64Field(value: self.startAt, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_ExperimentStartAtChangedEvent, rhs: Bucketeer_Event_Domain_ExperimentStartAtChangedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.startAt != rhs.startAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_ExperimentStopAtChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExperimentStopAtChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "stop_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.stopAt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.stopAt != 0 {
      try visitor.visitSingularInt64Field(value: self.stopAt, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_ExperimentStopAtChangedEvent, rhs: Bucketeer_Event_Domain_ExperimentStopAtChangedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.stopAt != rhs.stopAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_ExperimentPeriodChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExperimentPeriodChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "start_at"),
    3: .standard(proto: "stop_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.startAt)
      case 3: try decoder.decodeSingularInt64Field(value: &self.stopAt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.startAt != 0 {
      try visitor.visitSingularInt64Field(value: self.startAt, fieldNumber: 2)
    }
    if self.stopAt != 0 {
      try visitor.visitSingularInt64Field(value: self.stopAt, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_ExperimentPeriodChangedEvent, rhs: Bucketeer_Event_Domain_ExperimentPeriodChangedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.startAt != rhs.startAt {return false}
    if lhs.stopAt != rhs.stopAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_ExperimentNameChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExperimentNameChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_ExperimentNameChangedEvent, rhs: Bucketeer_Event_Domain_ExperimentNameChangedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_ExperimentDescriptionChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExperimentDescriptionChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_ExperimentDescriptionChangedEvent, rhs: Bucketeer_Event_Domain_ExperimentDescriptionChangedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_ExperimentStartedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExperimentStartedEvent"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_ExperimentStartedEvent, rhs: Bucketeer_Event_Domain_ExperimentStartedEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_ExperimentFinishedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExperimentFinishedEvent"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_ExperimentFinishedEvent, rhs: Bucketeer_Event_Domain_ExperimentFinishedEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AccountCreatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountCreatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "email"),
    3: .same(proto: "name"),
    4: .same(proto: "role"),
    5: .same(proto: "disabled"),
    6: .standard(proto: "created_at"),
    7: .standard(proto: "updated_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.email)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularEnumField(value: &self.role)
      case 5: try decoder.decodeSingularBoolField(value: &self.disabled)
      case 6: try decoder.decodeSingularInt64Field(value: &self.createdAt)
      case 7: try decoder.decodeSingularInt64Field(value: &self.updatedAt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if self.role != .viewer {
      try visitor.visitSingularEnumField(value: self.role, fieldNumber: 4)
    }
    if self.disabled != false {
      try visitor.visitSingularBoolField(value: self.disabled, fieldNumber: 5)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAt, fieldNumber: 6)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.updatedAt, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AccountCreatedEvent, rhs: Bucketeer_Event_Domain_AccountCreatedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.email != rhs.email {return false}
    if lhs.name != rhs.name {return false}
    if lhs.role != rhs.role {return false}
    if lhs.disabled != rhs.disabled {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AccountRoleChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountRoleChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "role"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularEnumField(value: &self.role)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.role != .viewer {
      try visitor.visitSingularEnumField(value: self.role, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AccountRoleChangedEvent, rhs: Bucketeer_Event_Domain_AccountRoleChangedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.role != rhs.role {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AccountEnabledEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountEnabledEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AccountEnabledEvent, rhs: Bucketeer_Event_Domain_AccountEnabledEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AccountDisabledEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountDisabledEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AccountDisabledEvent, rhs: Bucketeer_Event_Domain_AccountDisabledEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AccountDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountDeletedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AccountDeletedEvent, rhs: Bucketeer_Event_Domain_AccountDeletedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_APIKeyCreatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".APIKeyCreatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "role"),
    4: .same(proto: "disabled"),
    5: .standard(proto: "created_at"),
    6: .standard(proto: "updated_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularEnumField(value: &self.role)
      case 4: try decoder.decodeSingularBoolField(value: &self.disabled)
      case 5: try decoder.decodeSingularInt64Field(value: &self.createdAt)
      case 6: try decoder.decodeSingularInt64Field(value: &self.updatedAt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.role != .sdk {
      try visitor.visitSingularEnumField(value: self.role, fieldNumber: 3)
    }
    if self.disabled != false {
      try visitor.visitSingularBoolField(value: self.disabled, fieldNumber: 4)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAt, fieldNumber: 5)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.updatedAt, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_APIKeyCreatedEvent, rhs: Bucketeer_Event_Domain_APIKeyCreatedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.role != rhs.role {return false}
    if lhs.disabled != rhs.disabled {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_APIKeyNameChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".APIKeyNameChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_APIKeyNameChangedEvent, rhs: Bucketeer_Event_Domain_APIKeyNameChangedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_APIKeyEnabledEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".APIKeyEnabledEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_APIKeyEnabledEvent, rhs: Bucketeer_Event_Domain_APIKeyEnabledEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_APIKeyDisabledEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".APIKeyDisabledEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_APIKeyDisabledEvent, rhs: Bucketeer_Event_Domain_APIKeyDisabledEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SegmentCreatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SegmentCreatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SegmentCreatedEvent, rhs: Bucketeer_Event_Domain_SegmentCreatedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SegmentDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SegmentDeletedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SegmentDeletedEvent, rhs: Bucketeer_Event_Domain_SegmentDeletedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SegmentNameChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SegmentNameChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SegmentNameChangedEvent, rhs: Bucketeer_Event_Domain_SegmentNameChangedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SegmentDescriptionChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SegmentDescriptionChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SegmentDescriptionChangedEvent, rhs: Bucketeer_Event_Domain_SegmentDescriptionChangedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SegmentRuleAddedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SegmentRuleAddedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "rule"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._rule)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._rule {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SegmentRuleAddedEvent, rhs: Bucketeer_Event_Domain_SegmentRuleAddedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._rule != rhs._rule {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SegmentRuleDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SegmentRuleDeletedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "rule_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.ruleID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.ruleID.isEmpty {
      try visitor.visitSingularStringField(value: self.ruleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SegmentRuleDeletedEvent, rhs: Bucketeer_Event_Domain_SegmentRuleDeletedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.ruleID != rhs.ruleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SegmentRuleClauseAddedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SegmentRuleClauseAddedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "segment_id"),
    2: .standard(proto: "rule_id"),
    3: .same(proto: "clause"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.segmentID)
      case 2: try decoder.decodeSingularStringField(value: &self.ruleID)
      case 3: try decoder.decodeSingularMessageField(value: &self._clause)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.segmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.segmentID, fieldNumber: 1)
    }
    if !self.ruleID.isEmpty {
      try visitor.visitSingularStringField(value: self.ruleID, fieldNumber: 2)
    }
    if let v = self._clause {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SegmentRuleClauseAddedEvent, rhs: Bucketeer_Event_Domain_SegmentRuleClauseAddedEvent) -> Bool {
    if lhs.segmentID != rhs.segmentID {return false}
    if lhs.ruleID != rhs.ruleID {return false}
    if lhs._clause != rhs._clause {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SegmentRuleClauseDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SegmentRuleClauseDeletedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "segment_id"),
    2: .standard(proto: "rule_id"),
    3: .standard(proto: "clause_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.segmentID)
      case 2: try decoder.decodeSingularStringField(value: &self.ruleID)
      case 3: try decoder.decodeSingularStringField(value: &self.clauseID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.segmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.segmentID, fieldNumber: 1)
    }
    if !self.ruleID.isEmpty {
      try visitor.visitSingularStringField(value: self.ruleID, fieldNumber: 2)
    }
    if !self.clauseID.isEmpty {
      try visitor.visitSingularStringField(value: self.clauseID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SegmentRuleClauseDeletedEvent, rhs: Bucketeer_Event_Domain_SegmentRuleClauseDeletedEvent) -> Bool {
    if lhs.segmentID != rhs.segmentID {return false}
    if lhs.ruleID != rhs.ruleID {return false}
    if lhs.clauseID != rhs.clauseID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SegmentClauseAttributeChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SegmentClauseAttributeChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "segment_id"),
    2: .standard(proto: "rule_id"),
    3: .standard(proto: "clause_id"),
    4: .same(proto: "attribute"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.segmentID)
      case 2: try decoder.decodeSingularStringField(value: &self.ruleID)
      case 3: try decoder.decodeSingularStringField(value: &self.clauseID)
      case 4: try decoder.decodeSingularStringField(value: &self.attribute)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.segmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.segmentID, fieldNumber: 1)
    }
    if !self.ruleID.isEmpty {
      try visitor.visitSingularStringField(value: self.ruleID, fieldNumber: 2)
    }
    if !self.clauseID.isEmpty {
      try visitor.visitSingularStringField(value: self.clauseID, fieldNumber: 3)
    }
    if !self.attribute.isEmpty {
      try visitor.visitSingularStringField(value: self.attribute, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SegmentClauseAttributeChangedEvent, rhs: Bucketeer_Event_Domain_SegmentClauseAttributeChangedEvent) -> Bool {
    if lhs.segmentID != rhs.segmentID {return false}
    if lhs.ruleID != rhs.ruleID {return false}
    if lhs.clauseID != rhs.clauseID {return false}
    if lhs.attribute != rhs.attribute {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SegmentClauseOperatorChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SegmentClauseOperatorChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "segment_id"),
    2: .standard(proto: "rule_id"),
    3: .standard(proto: "clause_id"),
    4: .same(proto: "operator"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.segmentID)
      case 2: try decoder.decodeSingularStringField(value: &self.ruleID)
      case 3: try decoder.decodeSingularStringField(value: &self.clauseID)
      case 4: try decoder.decodeSingularEnumField(value: &self.`operator`)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.segmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.segmentID, fieldNumber: 1)
    }
    if !self.ruleID.isEmpty {
      try visitor.visitSingularStringField(value: self.ruleID, fieldNumber: 2)
    }
    if !self.clauseID.isEmpty {
      try visitor.visitSingularStringField(value: self.clauseID, fieldNumber: 3)
    }
    if self.`operator` != .equals {
      try visitor.visitSingularEnumField(value: self.`operator`, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SegmentClauseOperatorChangedEvent, rhs: Bucketeer_Event_Domain_SegmentClauseOperatorChangedEvent) -> Bool {
    if lhs.segmentID != rhs.segmentID {return false}
    if lhs.ruleID != rhs.ruleID {return false}
    if lhs.clauseID != rhs.clauseID {return false}
    if lhs.`operator` != rhs.`operator` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SegmentClauseValueAddedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SegmentClauseValueAddedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "segment_id"),
    2: .standard(proto: "rule_id"),
    3: .standard(proto: "clause_id"),
    4: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.segmentID)
      case 2: try decoder.decodeSingularStringField(value: &self.ruleID)
      case 3: try decoder.decodeSingularStringField(value: &self.clauseID)
      case 4: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.segmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.segmentID, fieldNumber: 1)
    }
    if !self.ruleID.isEmpty {
      try visitor.visitSingularStringField(value: self.ruleID, fieldNumber: 2)
    }
    if !self.clauseID.isEmpty {
      try visitor.visitSingularStringField(value: self.clauseID, fieldNumber: 3)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SegmentClauseValueAddedEvent, rhs: Bucketeer_Event_Domain_SegmentClauseValueAddedEvent) -> Bool {
    if lhs.segmentID != rhs.segmentID {return false}
    if lhs.ruleID != rhs.ruleID {return false}
    if lhs.clauseID != rhs.clauseID {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SegmentClauseValueRemovedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SegmentClauseValueRemovedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "segment_id"),
    2: .standard(proto: "rule_id"),
    3: .standard(proto: "clause_id"),
    4: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.segmentID)
      case 2: try decoder.decodeSingularStringField(value: &self.ruleID)
      case 3: try decoder.decodeSingularStringField(value: &self.clauseID)
      case 4: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.segmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.segmentID, fieldNumber: 1)
    }
    if !self.ruleID.isEmpty {
      try visitor.visitSingularStringField(value: self.ruleID, fieldNumber: 2)
    }
    if !self.clauseID.isEmpty {
      try visitor.visitSingularStringField(value: self.clauseID, fieldNumber: 3)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SegmentClauseValueRemovedEvent, rhs: Bucketeer_Event_Domain_SegmentClauseValueRemovedEvent) -> Bool {
    if lhs.segmentID != rhs.segmentID {return false}
    if lhs.ruleID != rhs.ruleID {return false}
    if lhs.clauseID != rhs.clauseID {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SegmentUserAddedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SegmentUserAddedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "segment_id"),
    2: .standard(proto: "user_ids"),
    3: .same(proto: "state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.segmentID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.userIds)
      case 3: try decoder.decodeSingularEnumField(value: &self.state)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.segmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.segmentID, fieldNumber: 1)
    }
    if !self.userIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.userIds, fieldNumber: 2)
    }
    if self.state != .included {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SegmentUserAddedEvent, rhs: Bucketeer_Event_Domain_SegmentUserAddedEvent) -> Bool {
    if lhs.segmentID != rhs.segmentID {return false}
    if lhs.userIds != rhs.userIds {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SegmentUserDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SegmentUserDeletedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "segment_id"),
    2: .standard(proto: "user_ids"),
    3: .same(proto: "state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.segmentID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.userIds)
      case 3: try decoder.decodeSingularEnumField(value: &self.state)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.segmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.segmentID, fieldNumber: 1)
    }
    if !self.userIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.userIds, fieldNumber: 2)
    }
    if self.state != .included {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SegmentUserDeletedEvent, rhs: Bucketeer_Event_Domain_SegmentUserDeletedEvent) -> Bool {
    if lhs.segmentID != rhs.segmentID {return false}
    if lhs.userIds != rhs.userIds {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SegmentBulkUploadUsersEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SegmentBulkUploadUsersEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "segment_id"),
    2: .same(proto: "status"),
    3: .same(proto: "state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.segmentID)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      case 3: try decoder.decodeSingularEnumField(value: &self.state)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.segmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.segmentID, fieldNumber: 1)
    }
    if self.status != .initial {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if self.state != .included {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SegmentBulkUploadUsersEvent, rhs: Bucketeer_Event_Domain_SegmentBulkUploadUsersEvent) -> Bool {
    if lhs.segmentID != rhs.segmentID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SegmentBulkUploadUsersStatusChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SegmentBulkUploadUsersStatusChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "segment_id"),
    2: .same(proto: "status"),
    3: .same(proto: "state"),
    4: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.segmentID)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      case 3: try decoder.decodeSingularEnumField(value: &self.state)
      case 4: try decoder.decodeSingularInt64Field(value: &self.count)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.segmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.segmentID, fieldNumber: 1)
    }
    if self.status != .initial {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if self.state != .included {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 3)
    }
    if self.count != 0 {
      try visitor.visitSingularInt64Field(value: self.count, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SegmentBulkUploadUsersStatusChangedEvent, rhs: Bucketeer_Event_Domain_SegmentBulkUploadUsersStatusChangedEvent) -> Bool {
    if lhs.segmentID != rhs.segmentID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.state != rhs.state {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_EnvironmentCreatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EnvironmentCreatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "namespace"),
    3: .same(proto: "name"),
    4: .same(proto: "description"),
    5: .same(proto: "deleted"),
    6: .standard(proto: "created_at"),
    7: .standard(proto: "updated_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.namespace)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularStringField(value: &self.description_p)
      case 5: try decoder.decodeSingularBoolField(value: &self.deleted)
      case 6: try decoder.decodeSingularInt64Field(value: &self.createdAt)
      case 7: try decoder.decodeSingularInt64Field(value: &self.updatedAt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.namespace.isEmpty {
      try visitor.visitSingularStringField(value: self.namespace, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 4)
    }
    if self.deleted != false {
      try visitor.visitSingularBoolField(value: self.deleted, fieldNumber: 5)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAt, fieldNumber: 6)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.updatedAt, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_EnvironmentCreatedEvent, rhs: Bucketeer_Event_Domain_EnvironmentCreatedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.namespace != rhs.namespace {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.deleted != rhs.deleted {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_EnvironmentRenamedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EnvironmentRenamedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_EnvironmentRenamedEvent, rhs: Bucketeer_Event_Domain_EnvironmentRenamedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_EnvironmentDescriptionChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EnvironmentDescriptionChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_EnvironmentDescriptionChangedEvent, rhs: Bucketeer_Event_Domain_EnvironmentDescriptionChangedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_EnvironmentDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EnvironmentDeletedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_EnvironmentDeletedEvent, rhs: Bucketeer_Event_Domain_EnvironmentDeletedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AdminAccountCreatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdminAccountCreatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "email"),
    3: .same(proto: "name"),
    4: .same(proto: "role"),
    5: .same(proto: "disabled"),
    6: .standard(proto: "created_at"),
    7: .standard(proto: "updated_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.email)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularEnumField(value: &self.role)
      case 5: try decoder.decodeSingularBoolField(value: &self.disabled)
      case 6: try decoder.decodeSingularInt64Field(value: &self.createdAt)
      case 7: try decoder.decodeSingularInt64Field(value: &self.updatedAt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if self.role != .viewer {
      try visitor.visitSingularEnumField(value: self.role, fieldNumber: 4)
    }
    if self.disabled != false {
      try visitor.visitSingularBoolField(value: self.disabled, fieldNumber: 5)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAt, fieldNumber: 6)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.updatedAt, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AdminAccountCreatedEvent, rhs: Bucketeer_Event_Domain_AdminAccountCreatedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.email != rhs.email {return false}
    if lhs.name != rhs.name {return false}
    if lhs.role != rhs.role {return false}
    if lhs.disabled != rhs.disabled {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AdminAccountEnabledEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdminAccountEnabledEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AdminAccountEnabledEvent, rhs: Bucketeer_Event_Domain_AdminAccountEnabledEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AdminAccountDisabledEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdminAccountDisabledEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AdminAccountDisabledEvent, rhs: Bucketeer_Event_Domain_AdminAccountDisabledEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AdminAccountDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdminAccountDeletedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AdminAccountDeletedEvent, rhs: Bucketeer_Event_Domain_AdminAccountDeletedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AutoOpsRuleCreatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AutoOpsRuleCreatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_id"),
    2: .standard(proto: "ops_type"),
    3: .same(proto: "clauses"),
    4: .standard(proto: "triggered_at"),
    5: .standard(proto: "created_at"),
    6: .standard(proto: "updated_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.featureID)
      case 2: try decoder.decodeSingularEnumField(value: &self.opsType)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.clauses)
      case 4: try decoder.decodeSingularInt64Field(value: &self.triggeredAt)
      case 5: try decoder.decodeSingularInt64Field(value: &self.createdAt)
      case 6: try decoder.decodeSingularInt64Field(value: &self.updatedAt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 1)
    }
    if self.opsType != .enableFeature {
      try visitor.visitSingularEnumField(value: self.opsType, fieldNumber: 2)
    }
    if !self.clauses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.clauses, fieldNumber: 3)
    }
    if self.triggeredAt != 0 {
      try visitor.visitSingularInt64Field(value: self.triggeredAt, fieldNumber: 4)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAt, fieldNumber: 5)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.updatedAt, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AutoOpsRuleCreatedEvent, rhs: Bucketeer_Event_Domain_AutoOpsRuleCreatedEvent) -> Bool {
    if lhs.featureID != rhs.featureID {return false}
    if lhs.opsType != rhs.opsType {return false}
    if lhs.clauses != rhs.clauses {return false}
    if lhs.triggeredAt != rhs.triggeredAt {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AutoOpsRuleDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AutoOpsRuleDeletedEvent"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AutoOpsRuleDeletedEvent, rhs: Bucketeer_Event_Domain_AutoOpsRuleDeletedEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AutoOpsRuleOpsTypeChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AutoOpsRuleOpsTypeChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ops_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.opsType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.opsType != .enableFeature {
      try visitor.visitSingularEnumField(value: self.opsType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AutoOpsRuleOpsTypeChangedEvent, rhs: Bucketeer_Event_Domain_AutoOpsRuleOpsTypeChangedEvent) -> Bool {
    if lhs.opsType != rhs.opsType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AutoOpsRuleTriggeredAtChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AutoOpsRuleTriggeredAtChangedEvent"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AutoOpsRuleTriggeredAtChangedEvent, rhs: Bucketeer_Event_Domain_AutoOpsRuleTriggeredAtChangedEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_OpsEventRateClauseAddedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OpsEventRateClauseAddedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "clause_id"),
    2: .standard(proto: "ops_event_rate_clause"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.clauseID)
      case 2: try decoder.decodeSingularMessageField(value: &self._opsEventRateClause)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clauseID.isEmpty {
      try visitor.visitSingularStringField(value: self.clauseID, fieldNumber: 1)
    }
    if let v = self._opsEventRateClause {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_OpsEventRateClauseAddedEvent, rhs: Bucketeer_Event_Domain_OpsEventRateClauseAddedEvent) -> Bool {
    if lhs.clauseID != rhs.clauseID {return false}
    if lhs._opsEventRateClause != rhs._opsEventRateClause {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_OpsEventRateClauseChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OpsEventRateClauseChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "clause_id"),
    2: .standard(proto: "ops_event_rate_clause"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.clauseID)
      case 2: try decoder.decodeSingularMessageField(value: &self._opsEventRateClause)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clauseID.isEmpty {
      try visitor.visitSingularStringField(value: self.clauseID, fieldNumber: 1)
    }
    if let v = self._opsEventRateClause {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_OpsEventRateClauseChangedEvent, rhs: Bucketeer_Event_Domain_OpsEventRateClauseChangedEvent) -> Bool {
    if lhs.clauseID != rhs.clauseID {return false}
    if lhs._opsEventRateClause != rhs._opsEventRateClause {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AutoOpsRuleClauseDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AutoOpsRuleClauseDeletedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "clause_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.clauseID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clauseID.isEmpty {
      try visitor.visitSingularStringField(value: self.clauseID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AutoOpsRuleClauseDeletedEvent, rhs: Bucketeer_Event_Domain_AutoOpsRuleClauseDeletedEvent) -> Bool {
    if lhs.clauseID != rhs.clauseID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_DatetimeClauseAddedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DatetimeClauseAddedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "clause_id"),
    2: .standard(proto: "datetime_clause"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.clauseID)
      case 2: try decoder.decodeSingularMessageField(value: &self._datetimeClause)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clauseID.isEmpty {
      try visitor.visitSingularStringField(value: self.clauseID, fieldNumber: 1)
    }
    if let v = self._datetimeClause {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_DatetimeClauseAddedEvent, rhs: Bucketeer_Event_Domain_DatetimeClauseAddedEvent) -> Bool {
    if lhs.clauseID != rhs.clauseID {return false}
    if lhs._datetimeClause != rhs._datetimeClause {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_DatetimeClauseChangedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DatetimeClauseChangedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "clause_id"),
    2: .standard(proto: "datetime_clause"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.clauseID)
      case 2: try decoder.decodeSingularMessageField(value: &self._datetimeClause)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clauseID.isEmpty {
      try visitor.visitSingularStringField(value: self.clauseID, fieldNumber: 1)
    }
    if let v = self._datetimeClause {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_DatetimeClauseChangedEvent, rhs: Bucketeer_Event_Domain_DatetimeClauseChangedEvent) -> Bool {
    if lhs.clauseID != rhs.clauseID {return false}
    if lhs._datetimeClause != rhs._datetimeClause {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_PushCreatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PushCreatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "fcm_api_key"),
    3: .same(proto: "tags"),
    4: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self.fcmApiKey)
      case 3: try decoder.decodeRepeatedStringField(value: &self.tags)
      case 4: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fcmApiKey.isEmpty {
      try visitor.visitSingularStringField(value: self.fcmApiKey, fieldNumber: 2)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_PushCreatedEvent, rhs: Bucketeer_Event_Domain_PushCreatedEvent) -> Bool {
    if lhs.fcmApiKey != rhs.fcmApiKey {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_PushDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PushDeletedEvent"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_PushDeletedEvent, rhs: Bucketeer_Event_Domain_PushDeletedEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_PushTagsAddedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PushTagsAddedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "tags"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedStringField(value: &self.tags)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_PushTagsAddedEvent, rhs: Bucketeer_Event_Domain_PushTagsAddedEvent) -> Bool {
    if lhs.tags != rhs.tags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_PushTagsDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PushTagsDeletedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "tags"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedStringField(value: &self.tags)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_PushTagsDeletedEvent, rhs: Bucketeer_Event_Domain_PushTagsDeletedEvent) -> Bool {
    if lhs.tags != rhs.tags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_PushRenamedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PushRenamedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_PushRenamedEvent, rhs: Bucketeer_Event_Domain_PushRenamedEvent) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SubscriptionCreatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscriptionCreatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_types"),
    2: .same(proto: "recipient"),
    3: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedEnumField(value: &self.sourceTypes)
      case 2: try decoder.decodeSingularMessageField(value: &self._recipient)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sourceTypes.isEmpty {
      try visitor.visitPackedEnumField(value: self.sourceTypes, fieldNumber: 1)
    }
    if let v = self._recipient {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SubscriptionCreatedEvent, rhs: Bucketeer_Event_Domain_SubscriptionCreatedEvent) -> Bool {
    if lhs.sourceTypes != rhs.sourceTypes {return false}
    if lhs._recipient != rhs._recipient {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SubscriptionDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscriptionDeletedEvent"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SubscriptionDeletedEvent, rhs: Bucketeer_Event_Domain_SubscriptionDeletedEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SubscriptionEnabledEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscriptionEnabledEvent"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SubscriptionEnabledEvent, rhs: Bucketeer_Event_Domain_SubscriptionEnabledEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SubscriptionDisabledEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscriptionDisabledEvent"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SubscriptionDisabledEvent, rhs: Bucketeer_Event_Domain_SubscriptionDisabledEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SubscriptionSourceTypesAddedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscriptionSourceTypesAddedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_types"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedEnumField(value: &self.sourceTypes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sourceTypes.isEmpty {
      try visitor.visitPackedEnumField(value: self.sourceTypes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SubscriptionSourceTypesAddedEvent, rhs: Bucketeer_Event_Domain_SubscriptionSourceTypesAddedEvent) -> Bool {
    if lhs.sourceTypes != rhs.sourceTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SubscriptionSourceTypesDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscriptionSourceTypesDeletedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_types"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedEnumField(value: &self.sourceTypes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sourceTypes.isEmpty {
      try visitor.visitPackedEnumField(value: self.sourceTypes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SubscriptionSourceTypesDeletedEvent, rhs: Bucketeer_Event_Domain_SubscriptionSourceTypesDeletedEvent) -> Bool {
    if lhs.sourceTypes != rhs.sourceTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_SubscriptionRenamedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscriptionRenamedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_SubscriptionRenamedEvent, rhs: Bucketeer_Event_Domain_SubscriptionRenamedEvent) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AdminSubscriptionCreatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdminSubscriptionCreatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_types"),
    2: .same(proto: "recipient"),
    3: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedEnumField(value: &self.sourceTypes)
      case 2: try decoder.decodeSingularMessageField(value: &self._recipient)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sourceTypes.isEmpty {
      try visitor.visitPackedEnumField(value: self.sourceTypes, fieldNumber: 1)
    }
    if let v = self._recipient {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AdminSubscriptionCreatedEvent, rhs: Bucketeer_Event_Domain_AdminSubscriptionCreatedEvent) -> Bool {
    if lhs.sourceTypes != rhs.sourceTypes {return false}
    if lhs._recipient != rhs._recipient {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AdminSubscriptionDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdminSubscriptionDeletedEvent"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AdminSubscriptionDeletedEvent, rhs: Bucketeer_Event_Domain_AdminSubscriptionDeletedEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AdminSubscriptionEnabledEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdminSubscriptionEnabledEvent"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AdminSubscriptionEnabledEvent, rhs: Bucketeer_Event_Domain_AdminSubscriptionEnabledEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AdminSubscriptionDisabledEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdminSubscriptionDisabledEvent"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AdminSubscriptionDisabledEvent, rhs: Bucketeer_Event_Domain_AdminSubscriptionDisabledEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AdminSubscriptionSourceTypesAddedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdminSubscriptionSourceTypesAddedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_types"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedEnumField(value: &self.sourceTypes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sourceTypes.isEmpty {
      try visitor.visitPackedEnumField(value: self.sourceTypes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AdminSubscriptionSourceTypesAddedEvent, rhs: Bucketeer_Event_Domain_AdminSubscriptionSourceTypesAddedEvent) -> Bool {
    if lhs.sourceTypes != rhs.sourceTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AdminSubscriptionSourceTypesDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdminSubscriptionSourceTypesDeletedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_types"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedEnumField(value: &self.sourceTypes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sourceTypes.isEmpty {
      try visitor.visitPackedEnumField(value: self.sourceTypes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AdminSubscriptionSourceTypesDeletedEvent, rhs: Bucketeer_Event_Domain_AdminSubscriptionSourceTypesDeletedEvent) -> Bool {
    if lhs.sourceTypes != rhs.sourceTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Event_Domain_AdminSubscriptionRenamedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdminSubscriptionRenamedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Event_Domain_AdminSubscriptionRenamedEvent, rhs: Bucketeer_Event_Domain_AdminSubscriptionRenamedEvent) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
