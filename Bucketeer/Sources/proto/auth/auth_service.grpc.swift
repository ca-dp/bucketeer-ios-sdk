//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: proto/auth/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Bucketeer_Auth_AuthServiceGetAuthCodeURLCall: ClientCallUnary {}

fileprivate final class Bucketeer_Auth_AuthServiceGetAuthCodeURLCallBase: ClientCallUnaryBase<Bucketeer_Auth_GetAuthCodeURLRequest, Bucketeer_Auth_GetAuthCodeURLResponse>, Bucketeer_Auth_AuthServiceGetAuthCodeURLCall {
  override class var method: String { return "/bucketeer.auth.AuthService/GetAuthCodeURL" }
}

internal protocol Bucketeer_Auth_AuthServiceExchangeTokenCall: ClientCallUnary {}

fileprivate final class Bucketeer_Auth_AuthServiceExchangeTokenCallBase: ClientCallUnaryBase<Bucketeer_Auth_ExchangeTokenRequest, Bucketeer_Auth_ExchangeTokenResponse>, Bucketeer_Auth_AuthServiceExchangeTokenCall {
  override class var method: String { return "/bucketeer.auth.AuthService/ExchangeToken" }
}

internal protocol Bucketeer_Auth_AuthServiceRefreshTokenCall: ClientCallUnary {}

fileprivate final class Bucketeer_Auth_AuthServiceRefreshTokenCallBase: ClientCallUnaryBase<Bucketeer_Auth_RefreshTokenRequest, Bucketeer_Auth_RefreshTokenResponse>, Bucketeer_Auth_AuthServiceRefreshTokenCall {
  override class var method: String { return "/bucketeer.auth.AuthService/RefreshToken" }
}


/// Instantiate Bucketeer_Auth_AuthServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Bucketeer_Auth_AuthServiceService: ServiceClient {
  /// Synchronous. Unary.
  func getAuthCodeURL(_ request: Bucketeer_Auth_GetAuthCodeURLRequest, metadata customMetadata: Metadata) throws -> Bucketeer_Auth_GetAuthCodeURLResponse
  /// Asynchronous. Unary.
  @discardableResult
  func getAuthCodeURL(_ request: Bucketeer_Auth_GetAuthCodeURLRequest, metadata customMetadata: Metadata, completion: @escaping (Bucketeer_Auth_GetAuthCodeURLResponse?, CallResult) -> Void) throws -> Bucketeer_Auth_AuthServiceGetAuthCodeURLCall

  /// Synchronous. Unary.
  func exchangeToken(_ request: Bucketeer_Auth_ExchangeTokenRequest, metadata customMetadata: Metadata) throws -> Bucketeer_Auth_ExchangeTokenResponse
  /// Asynchronous. Unary.
  @discardableResult
  func exchangeToken(_ request: Bucketeer_Auth_ExchangeTokenRequest, metadata customMetadata: Metadata, completion: @escaping (Bucketeer_Auth_ExchangeTokenResponse?, CallResult) -> Void) throws -> Bucketeer_Auth_AuthServiceExchangeTokenCall

  /// Synchronous. Unary.
  func refreshToken(_ request: Bucketeer_Auth_RefreshTokenRequest, metadata customMetadata: Metadata) throws -> Bucketeer_Auth_RefreshTokenResponse
  /// Asynchronous. Unary.
  @discardableResult
  func refreshToken(_ request: Bucketeer_Auth_RefreshTokenRequest, metadata customMetadata: Metadata, completion: @escaping (Bucketeer_Auth_RefreshTokenResponse?, CallResult) -> Void) throws -> Bucketeer_Auth_AuthServiceRefreshTokenCall

}

internal extension Bucketeer_Auth_AuthServiceService {
  /// Synchronous. Unary.
  func getAuthCodeURL(_ request: Bucketeer_Auth_GetAuthCodeURLRequest) throws -> Bucketeer_Auth_GetAuthCodeURLResponse {
    return try self.getAuthCodeURL(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getAuthCodeURL(_ request: Bucketeer_Auth_GetAuthCodeURLRequest, completion: @escaping (Bucketeer_Auth_GetAuthCodeURLResponse?, CallResult) -> Void) throws -> Bucketeer_Auth_AuthServiceGetAuthCodeURLCall {
    return try self.getAuthCodeURL(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func exchangeToken(_ request: Bucketeer_Auth_ExchangeTokenRequest) throws -> Bucketeer_Auth_ExchangeTokenResponse {
    return try self.exchangeToken(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func exchangeToken(_ request: Bucketeer_Auth_ExchangeTokenRequest, completion: @escaping (Bucketeer_Auth_ExchangeTokenResponse?, CallResult) -> Void) throws -> Bucketeer_Auth_AuthServiceExchangeTokenCall {
    return try self.exchangeToken(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func refreshToken(_ request: Bucketeer_Auth_RefreshTokenRequest) throws -> Bucketeer_Auth_RefreshTokenResponse {
    return try self.refreshToken(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func refreshToken(_ request: Bucketeer_Auth_RefreshTokenRequest, completion: @escaping (Bucketeer_Auth_RefreshTokenResponse?, CallResult) -> Void) throws -> Bucketeer_Auth_AuthServiceRefreshTokenCall {
    return try self.refreshToken(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Bucketeer_Auth_AuthServiceServiceClient: ServiceClientBase, Bucketeer_Auth_AuthServiceService {
  /// Synchronous. Unary.
  internal func getAuthCodeURL(_ request: Bucketeer_Auth_GetAuthCodeURLRequest, metadata customMetadata: Metadata) throws -> Bucketeer_Auth_GetAuthCodeURLResponse {
    return try Bucketeer_Auth_AuthServiceGetAuthCodeURLCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getAuthCodeURL(_ request: Bucketeer_Auth_GetAuthCodeURLRequest, metadata customMetadata: Metadata, completion: @escaping (Bucketeer_Auth_GetAuthCodeURLResponse?, CallResult) -> Void) throws -> Bucketeer_Auth_AuthServiceGetAuthCodeURLCall {
    return try Bucketeer_Auth_AuthServiceGetAuthCodeURLCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func exchangeToken(_ request: Bucketeer_Auth_ExchangeTokenRequest, metadata customMetadata: Metadata) throws -> Bucketeer_Auth_ExchangeTokenResponse {
    return try Bucketeer_Auth_AuthServiceExchangeTokenCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func exchangeToken(_ request: Bucketeer_Auth_ExchangeTokenRequest, metadata customMetadata: Metadata, completion: @escaping (Bucketeer_Auth_ExchangeTokenResponse?, CallResult) -> Void) throws -> Bucketeer_Auth_AuthServiceExchangeTokenCall {
    return try Bucketeer_Auth_AuthServiceExchangeTokenCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func refreshToken(_ request: Bucketeer_Auth_RefreshTokenRequest, metadata customMetadata: Metadata) throws -> Bucketeer_Auth_RefreshTokenResponse {
    return try Bucketeer_Auth_AuthServiceRefreshTokenCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func refreshToken(_ request: Bucketeer_Auth_RefreshTokenRequest, metadata customMetadata: Metadata, completion: @escaping (Bucketeer_Auth_RefreshTokenResponse?, CallResult) -> Void) throws -> Bucketeer_Auth_AuthServiceRefreshTokenCall {
    return try Bucketeer_Auth_AuthServiceRefreshTokenCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Bucketeer_Auth_AuthServiceProvider: ServiceProvider {
  func getAuthCodeURL(request: Bucketeer_Auth_GetAuthCodeURLRequest, session: Bucketeer_Auth_AuthServiceGetAuthCodeURLSession) throws -> Bucketeer_Auth_GetAuthCodeURLResponse
  func exchangeToken(request: Bucketeer_Auth_ExchangeTokenRequest, session: Bucketeer_Auth_AuthServiceExchangeTokenSession) throws -> Bucketeer_Auth_ExchangeTokenResponse
  func refreshToken(request: Bucketeer_Auth_RefreshTokenRequest, session: Bucketeer_Auth_AuthServiceRefreshTokenSession) throws -> Bucketeer_Auth_RefreshTokenResponse
}

extension Bucketeer_Auth_AuthServiceProvider {
  internal var serviceName: String { return "bucketeer.auth.AuthService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/bucketeer.auth.AuthService/GetAuthCodeURL":
      return try Bucketeer_Auth_AuthServiceGetAuthCodeURLSessionBase(
        handler: handler,
        providerBlock: { try self.getAuthCodeURL(request: $0, session: $1 as! Bucketeer_Auth_AuthServiceGetAuthCodeURLSessionBase) })
          .run()
    case "/bucketeer.auth.AuthService/ExchangeToken":
      return try Bucketeer_Auth_AuthServiceExchangeTokenSessionBase(
        handler: handler,
        providerBlock: { try self.exchangeToken(request: $0, session: $1 as! Bucketeer_Auth_AuthServiceExchangeTokenSessionBase) })
          .run()
    case "/bucketeer.auth.AuthService/RefreshToken":
      return try Bucketeer_Auth_AuthServiceRefreshTokenSessionBase(
        handler: handler,
        providerBlock: { try self.refreshToken(request: $0, session: $1 as! Bucketeer_Auth_AuthServiceRefreshTokenSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Bucketeer_Auth_AuthServiceGetAuthCodeURLSession: ServerSessionUnary {}

fileprivate final class Bucketeer_Auth_AuthServiceGetAuthCodeURLSessionBase: ServerSessionUnaryBase<Bucketeer_Auth_GetAuthCodeURLRequest, Bucketeer_Auth_GetAuthCodeURLResponse>, Bucketeer_Auth_AuthServiceGetAuthCodeURLSession {}

internal protocol Bucketeer_Auth_AuthServiceExchangeTokenSession: ServerSessionUnary {}

fileprivate final class Bucketeer_Auth_AuthServiceExchangeTokenSessionBase: ServerSessionUnaryBase<Bucketeer_Auth_ExchangeTokenRequest, Bucketeer_Auth_ExchangeTokenResponse>, Bucketeer_Auth_AuthServiceExchangeTokenSession {}

internal protocol Bucketeer_Auth_AuthServiceRefreshTokenSession: ServerSessionUnary {}

fileprivate final class Bucketeer_Auth_AuthServiceRefreshTokenSessionBase: ServerSessionUnaryBase<Bucketeer_Auth_RefreshTokenRequest, Bucketeer_Auth_RefreshTokenResponse>, Bucketeer_Auth_AuthServiceRefreshTokenSession {}

