// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/eventcounter/streaming_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Eventcounter_GetEvaluationRealtimeCountRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureID: String = String()

  var featureVersion: Int32 = 0

  var variationIds: [String] = []

  var environmentNamespace: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Eventcounter_GetEvaluationRealtimeCountResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var counts: Dictionary<String,Bucketeer_Eventcounter_VariationCount> = [:]

  var overVariationCount: Bucketeer_Eventcounter_VariationCount {
    get {return _overVariationCount ?? Bucketeer_Eventcounter_VariationCount()}
    set {_overVariationCount = newValue}
  }
  /// Returns true if `overVariationCount` has been explicitly set.
  var hasOverVariationCount: Bool {return self._overVariationCount != nil}
  /// Clears the value of `overVariationCount`. Subsequent reads from it will return its default value.
  mutating func clearOverVariationCount() {self._overVariationCount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _overVariationCount: Bucketeer_Eventcounter_VariationCount? = nil
}

struct Bucketeer_Eventcounter_GetExperimentRealtimeCountRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var experimentID: String = String()

  var variationIds: [String] = []

  var goalIds: [String] = []

  var environmentNamespace: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Eventcounter_GetExperimentRealtimeCountResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var counts: Dictionary<String,Bucketeer_Eventcounter_VariationCount> = [:]

  var overVariationCount: Bucketeer_Eventcounter_VariationCount {
    get {return _overVariationCount ?? Bucketeer_Eventcounter_VariationCount()}
    set {_overVariationCount = newValue}
  }
  /// Returns true if `overVariationCount` has been explicitly set.
  var hasOverVariationCount: Bool {return self._overVariationCount != nil}
  /// Clears the value of `overVariationCount`. Subsequent reads from it will return its default value.
  mutating func clearOverVariationCount() {self._overVariationCount = nil}

  var variationCounts: Dictionary<String,Bucketeer_Eventcounter_GoalCounts> = [:]

  var overVariationCounts: Dictionary<String,Bucketeer_Eventcounter_GoalCounts> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _overVariationCount: Bucketeer_Eventcounter_VariationCount? = nil
}

struct Bucketeer_Eventcounter_GetOpsRealtimeVariationCountRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var environmentNamespace: String = String()

  var featureID: String = String()

  var featureVersion: Int32 = 0

  var variationID: String = String()

  var goalID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Eventcounter_GetOpsRealtimeVariationCountResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var variationCount: Bucketeer_Eventcounter_VariationCount {
    get {return _variationCount ?? Bucketeer_Eventcounter_VariationCount()}
    set {_variationCount = newValue}
  }
  /// Returns true if `variationCount` has been explicitly set.
  var hasVariationCount: Bool {return self._variationCount != nil}
  /// Clears the value of `variationCount`. Subsequent reads from it will return its default value.
  mutating func clearVariationCount() {self._variationCount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _variationCount: Bucketeer_Eventcounter_VariationCount? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.eventcounter"

extension Bucketeer_Eventcounter_GetEvaluationRealtimeCountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetEvaluationRealtimeCountRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_id"),
    2: .standard(proto: "feature_version"),
    3: .standard(proto: "variation_ids"),
    4: .standard(proto: "environment_namespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.featureID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.featureVersion)
      case 3: try decoder.decodeRepeatedStringField(value: &self.variationIds)
      case 4: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 1)
    }
    if self.featureVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.featureVersion, fieldNumber: 2)
    }
    if !self.variationIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.variationIds, fieldNumber: 3)
    }
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Eventcounter_GetEvaluationRealtimeCountRequest, rhs: Bucketeer_Eventcounter_GetEvaluationRealtimeCountRequest) -> Bool {
    if lhs.featureID != rhs.featureID {return false}
    if lhs.featureVersion != rhs.featureVersion {return false}
    if lhs.variationIds != rhs.variationIds {return false}
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Eventcounter_GetEvaluationRealtimeCountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetEvaluationRealtimeCountResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "counts"),
    2: .standard(proto: "over_variation_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bucketeer_Eventcounter_VariationCount>.self, value: &self.counts)
      case 2: try decoder.decodeSingularMessageField(value: &self._overVariationCount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.counts.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bucketeer_Eventcounter_VariationCount>.self, value: self.counts, fieldNumber: 1)
    }
    if let v = self._overVariationCount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Eventcounter_GetEvaluationRealtimeCountResponse, rhs: Bucketeer_Eventcounter_GetEvaluationRealtimeCountResponse) -> Bool {
    if lhs.counts != rhs.counts {return false}
    if lhs._overVariationCount != rhs._overVariationCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Eventcounter_GetExperimentRealtimeCountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetExperimentRealtimeCountRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "experiment_id"),
    2: .standard(proto: "variation_ids"),
    3: .standard(proto: "goal_ids"),
    4: .standard(proto: "environment_namespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.experimentID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.variationIds)
      case 3: try decoder.decodeRepeatedStringField(value: &self.goalIds)
      case 4: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.experimentID.isEmpty {
      try visitor.visitSingularStringField(value: self.experimentID, fieldNumber: 1)
    }
    if !self.variationIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.variationIds, fieldNumber: 2)
    }
    if !self.goalIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.goalIds, fieldNumber: 3)
    }
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Eventcounter_GetExperimentRealtimeCountRequest, rhs: Bucketeer_Eventcounter_GetExperimentRealtimeCountRequest) -> Bool {
    if lhs.experimentID != rhs.experimentID {return false}
    if lhs.variationIds != rhs.variationIds {return false}
    if lhs.goalIds != rhs.goalIds {return false}
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Eventcounter_GetExperimentRealtimeCountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetExperimentRealtimeCountResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "counts"),
    2: .standard(proto: "over_variation_count"),
    3: .standard(proto: "variation_counts"),
    4: .standard(proto: "over_variation_counts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bucketeer_Eventcounter_VariationCount>.self, value: &self.counts)
      case 2: try decoder.decodeSingularMessageField(value: &self._overVariationCount)
      case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bucketeer_Eventcounter_GoalCounts>.self, value: &self.variationCounts)
      case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bucketeer_Eventcounter_GoalCounts>.self, value: &self.overVariationCounts)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.counts.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bucketeer_Eventcounter_VariationCount>.self, value: self.counts, fieldNumber: 1)
    }
    if let v = self._overVariationCount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.variationCounts.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bucketeer_Eventcounter_GoalCounts>.self, value: self.variationCounts, fieldNumber: 3)
    }
    if !self.overVariationCounts.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bucketeer_Eventcounter_GoalCounts>.self, value: self.overVariationCounts, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Eventcounter_GetExperimentRealtimeCountResponse, rhs: Bucketeer_Eventcounter_GetExperimentRealtimeCountResponse) -> Bool {
    if lhs.counts != rhs.counts {return false}
    if lhs._overVariationCount != rhs._overVariationCount {return false}
    if lhs.variationCounts != rhs.variationCounts {return false}
    if lhs.overVariationCounts != rhs.overVariationCounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Eventcounter_GetOpsRealtimeVariationCountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOpsRealtimeVariationCountRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_namespace"),
    2: .standard(proto: "feature_id"),
    3: .standard(proto: "feature_version"),
    4: .standard(proto: "variation_id"),
    5: .standard(proto: "goal_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 2: try decoder.decodeSingularStringField(value: &self.featureID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.featureVersion)
      case 4: try decoder.decodeSingularStringField(value: &self.variationID)
      case 5: try decoder.decodeSingularStringField(value: &self.goalID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 1)
    }
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 2)
    }
    if self.featureVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.featureVersion, fieldNumber: 3)
    }
    if !self.variationID.isEmpty {
      try visitor.visitSingularStringField(value: self.variationID, fieldNumber: 4)
    }
    if !self.goalID.isEmpty {
      try visitor.visitSingularStringField(value: self.goalID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Eventcounter_GetOpsRealtimeVariationCountRequest, rhs: Bucketeer_Eventcounter_GetOpsRealtimeVariationCountRequest) -> Bool {
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.featureID != rhs.featureID {return false}
    if lhs.featureVersion != rhs.featureVersion {return false}
    if lhs.variationID != rhs.variationID {return false}
    if lhs.goalID != rhs.goalID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Eventcounter_GetOpsRealtimeVariationCountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOpsRealtimeVariationCountResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "variation_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._variationCount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._variationCount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Eventcounter_GetOpsRealtimeVariationCountResponse, rhs: Bucketeer_Eventcounter_GetOpsRealtimeVariationCountResponse) -> Bool {
    if lhs._variationCount != rhs._variationCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
