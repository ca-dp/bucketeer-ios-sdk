// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/eventcounter/experiment_count.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Eventcounter_ExperimentCount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var featureID: String = String()

  var featureVersion: Int32 = 0

  var goalID: String = String()

  var realtimeCounts: [Bucketeer_Eventcounter_VariationCount] = []

  var batchCounts: [Bucketeer_Eventcounter_VariationCount] = []

  var updatedAt: Int64 = 0

  var goalCounts: [Bucketeer_Eventcounter_GoalCounts] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Eventcounter_GoalCounts {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var goalID: String = String()

  var realtimeCounts: [Bucketeer_Eventcounter_VariationCount] = []

  var batchCounts: [Bucketeer_Eventcounter_VariationCount] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.eventcounter"

extension Bucketeer_Eventcounter_ExperimentCount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExperimentCount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "feature_id"),
    3: .standard(proto: "feature_version"),
    4: .standard(proto: "goal_id"),
    5: .standard(proto: "realtime_counts"),
    6: .standard(proto: "batch_counts"),
    7: .standard(proto: "updated_at"),
    8: .standard(proto: "goal_counts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.featureID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.featureVersion)
      case 4: try decoder.decodeSingularStringField(value: &self.goalID)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.realtimeCounts)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.batchCounts)
      case 7: try decoder.decodeSingularInt64Field(value: &self.updatedAt)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.goalCounts)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 2)
    }
    if self.featureVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.featureVersion, fieldNumber: 3)
    }
    if !self.goalID.isEmpty {
      try visitor.visitSingularStringField(value: self.goalID, fieldNumber: 4)
    }
    if !self.realtimeCounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.realtimeCounts, fieldNumber: 5)
    }
    if !self.batchCounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.batchCounts, fieldNumber: 6)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.updatedAt, fieldNumber: 7)
    }
    if !self.goalCounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.goalCounts, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Eventcounter_ExperimentCount, rhs: Bucketeer_Eventcounter_ExperimentCount) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.featureID != rhs.featureID {return false}
    if lhs.featureVersion != rhs.featureVersion {return false}
    if lhs.goalID != rhs.goalID {return false}
    if lhs.realtimeCounts != rhs.realtimeCounts {return false}
    if lhs.batchCounts != rhs.batchCounts {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.goalCounts != rhs.goalCounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Eventcounter_GoalCounts: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GoalCounts"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "goal_id"),
    2: .standard(proto: "realtime_counts"),
    3: .standard(proto: "batch_counts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.goalID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.realtimeCounts)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.batchCounts)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.goalID.isEmpty {
      try visitor.visitSingularStringField(value: self.goalID, fieldNumber: 1)
    }
    if !self.realtimeCounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.realtimeCounts, fieldNumber: 2)
    }
    if !self.batchCounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.batchCounts, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Eventcounter_GoalCounts, rhs: Bucketeer_Eventcounter_GoalCounts) -> Bool {
    if lhs.goalID != rhs.goalID {return false}
    if lhs.realtimeCounts != rhs.realtimeCounts {return false}
    if lhs.batchCounts != rhs.batchCounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
