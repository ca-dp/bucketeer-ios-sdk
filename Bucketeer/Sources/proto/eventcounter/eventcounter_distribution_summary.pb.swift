// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/eventcounter/distribution_summary.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Eventcounter_DistributionSummary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mean: Double {
    get {return _storage._mean}
    set {_uniqueStorage()._mean = newValue}
  }

  var sd: Double {
    get {return _storage._sd}
    set {_uniqueStorage()._sd = newValue}
  }

  var rhat: Double {
    get {return _storage._rhat}
    set {_uniqueStorage()._rhat = newValue}
  }

  var histogram: Bucketeer_Eventcounter_Histogram {
    get {return _storage._histogram ?? Bucketeer_Eventcounter_Histogram()}
    set {_uniqueStorage()._histogram = newValue}
  }
  /// Returns true if `histogram` has been explicitly set.
  var hasHistogram: Bool {return _storage._histogram != nil}
  /// Clears the value of `histogram`. Subsequent reads from it will return its default value.
  mutating func clearHistogram() {_uniqueStorage()._histogram = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.eventcounter"

extension Bucketeer_Eventcounter_DistributionSummary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DistributionSummary"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mean"),
    2: .same(proto: "sd"),
    3: .same(proto: "rhat"),
    4: .same(proto: "histogram"),
  ]

  fileprivate class _StorageClass {
    var _mean: Double = 0
    var _sd: Double = 0
    var _rhat: Double = 0
    var _histogram: Bucketeer_Eventcounter_Histogram? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mean = source._mean
      _sd = source._sd
      _rhat = source._rhat
      _histogram = source._histogram
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularDoubleField(value: &_storage._mean)
        case 2: try decoder.decodeSingularDoubleField(value: &_storage._sd)
        case 3: try decoder.decodeSingularDoubleField(value: &_storage._rhat)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._histogram)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._mean != 0 {
        try visitor.visitSingularDoubleField(value: _storage._mean, fieldNumber: 1)
      }
      if _storage._sd != 0 {
        try visitor.visitSingularDoubleField(value: _storage._sd, fieldNumber: 2)
      }
      if _storage._rhat != 0 {
        try visitor.visitSingularDoubleField(value: _storage._rhat, fieldNumber: 3)
      }
      if let v = _storage._histogram {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Eventcounter_DistributionSummary, rhs: Bucketeer_Eventcounter_DistributionSummary) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mean != rhs_storage._mean {return false}
        if _storage._sd != rhs_storage._sd {return false}
        if _storage._rhat != rhs_storage._rhat {return false}
        if _storage._histogram != rhs_storage._histogram {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
