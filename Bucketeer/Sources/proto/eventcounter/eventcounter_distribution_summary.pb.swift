// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/eventcounter/distribution_summary.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Eventcounter_DistributionSummary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mean: Double = 0

  var sd: Double = 0

  var rhat: Double = 0

  var histogram: Bucketeer_Eventcounter_Histogram {
    get {return _histogram ?? Bucketeer_Eventcounter_Histogram()}
    set {_histogram = newValue}
  }
  /// Returns true if `histogram` has been explicitly set.
  var hasHistogram: Bool {return self._histogram != nil}
  /// Clears the value of `histogram`. Subsequent reads from it will return its default value.
  mutating func clearHistogram() {self._histogram = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _histogram: Bucketeer_Eventcounter_Histogram? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.eventcounter"

extension Bucketeer_Eventcounter_DistributionSummary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DistributionSummary"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mean"),
    2: .same(proto: "sd"),
    3: .same(proto: "rhat"),
    4: .same(proto: "histogram"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.mean)
      case 2: try decoder.decodeSingularDoubleField(value: &self.sd)
      case 3: try decoder.decodeSingularDoubleField(value: &self.rhat)
      case 4: try decoder.decodeSingularMessageField(value: &self._histogram)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mean != 0 {
      try visitor.visitSingularDoubleField(value: self.mean, fieldNumber: 1)
    }
    if self.sd != 0 {
      try visitor.visitSingularDoubleField(value: self.sd, fieldNumber: 2)
    }
    if self.rhat != 0 {
      try visitor.visitSingularDoubleField(value: self.rhat, fieldNumber: 3)
    }
    if let v = self._histogram {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Eventcounter_DistributionSummary, rhs: Bucketeer_Eventcounter_DistributionSummary) -> Bool {
    if lhs.mean != rhs.mean {return false}
    if lhs.sd != rhs.sd {return false}
    if lhs.rhat != rhs.rhat {return false}
    if lhs._histogram != rhs._histogram {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
