// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/eventcounter/variation_result.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Eventcounter_VariationResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var variationID: String {
    get {return _storage._variationID}
    set {_uniqueStorage()._variationID = newValue}
  }

  var experimentCount: Bucketeer_Eventcounter_VariationCount {
    get {return _storage._experimentCount ?? Bucketeer_Eventcounter_VariationCount()}
    set {_uniqueStorage()._experimentCount = newValue}
  }
  /// Returns true if `experimentCount` has been explicitly set.
  var hasExperimentCount: Bool {return _storage._experimentCount != nil}
  /// Clears the value of `experimentCount`. Subsequent reads from it will return its default value.
  mutating func clearExperimentCount() {_uniqueStorage()._experimentCount = nil}

  var evaluationCount: Bucketeer_Eventcounter_VariationCount {
    get {return _storage._evaluationCount ?? Bucketeer_Eventcounter_VariationCount()}
    set {_uniqueStorage()._evaluationCount = newValue}
  }
  /// Returns true if `evaluationCount` has been explicitly set.
  var hasEvaluationCount: Bool {return _storage._evaluationCount != nil}
  /// Clears the value of `evaluationCount`. Subsequent reads from it will return its default value.
  mutating func clearEvaluationCount() {_uniqueStorage()._evaluationCount = nil}

  var cvrProbBest: Bucketeer_Eventcounter_DistributionSummary {
    get {return _storage._cvrProbBest ?? Bucketeer_Eventcounter_DistributionSummary()}
    set {_uniqueStorage()._cvrProbBest = newValue}
  }
  /// Returns true if `cvrProbBest` has been explicitly set.
  var hasCvrProbBest: Bool {return _storage._cvrProbBest != nil}
  /// Clears the value of `cvrProbBest`. Subsequent reads from it will return its default value.
  mutating func clearCvrProbBest() {_uniqueStorage()._cvrProbBest = nil}

  var cvrProbBeatBaseline: Bucketeer_Eventcounter_DistributionSummary {
    get {return _storage._cvrProbBeatBaseline ?? Bucketeer_Eventcounter_DistributionSummary()}
    set {_uniqueStorage()._cvrProbBeatBaseline = newValue}
  }
  /// Returns true if `cvrProbBeatBaseline` has been explicitly set.
  var hasCvrProbBeatBaseline: Bool {return _storage._cvrProbBeatBaseline != nil}
  /// Clears the value of `cvrProbBeatBaseline`. Subsequent reads from it will return its default value.
  mutating func clearCvrProbBeatBaseline() {_uniqueStorage()._cvrProbBeatBaseline = nil}

  var cvrProb: Bucketeer_Eventcounter_DistributionSummary {
    get {return _storage._cvrProb ?? Bucketeer_Eventcounter_DistributionSummary()}
    set {_uniqueStorage()._cvrProb = newValue}
  }
  /// Returns true if `cvrProb` has been explicitly set.
  var hasCvrProb: Bool {return _storage._cvrProb != nil}
  /// Clears the value of `cvrProb`. Subsequent reads from it will return its default value.
  mutating func clearCvrProb() {_uniqueStorage()._cvrProb = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.eventcounter"

extension Bucketeer_Eventcounter_VariationResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VariationResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "variation_id"),
    2: .standard(proto: "experiment_count"),
    3: .standard(proto: "evaluation_count"),
    4: .standard(proto: "cvr_prob_best"),
    5: .standard(proto: "cvr_prob_beat_baseline"),
    6: .standard(proto: "cvr_prob"),
  ]

  fileprivate class _StorageClass {
    var _variationID: String = String()
    var _experimentCount: Bucketeer_Eventcounter_VariationCount? = nil
    var _evaluationCount: Bucketeer_Eventcounter_VariationCount? = nil
    var _cvrProbBest: Bucketeer_Eventcounter_DistributionSummary? = nil
    var _cvrProbBeatBaseline: Bucketeer_Eventcounter_DistributionSummary? = nil
    var _cvrProb: Bucketeer_Eventcounter_DistributionSummary? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _variationID = source._variationID
      _experimentCount = source._experimentCount
      _evaluationCount = source._evaluationCount
      _cvrProbBest = source._cvrProbBest
      _cvrProbBeatBaseline = source._cvrProbBeatBaseline
      _cvrProb = source._cvrProb
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._variationID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._experimentCount)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._evaluationCount)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._cvrProbBest)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._cvrProbBeatBaseline)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._cvrProb)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._variationID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._variationID, fieldNumber: 1)
      }
      if let v = _storage._experimentCount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._evaluationCount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._cvrProbBest {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._cvrProbBeatBaseline {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._cvrProb {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Eventcounter_VariationResult, rhs: Bucketeer_Eventcounter_VariationResult) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._variationID != rhs_storage._variationID {return false}
        if _storage._experimentCount != rhs_storage._experimentCount {return false}
        if _storage._evaluationCount != rhs_storage._evaluationCount {return false}
        if _storage._cvrProbBest != rhs_storage._cvrProbBest {return false}
        if _storage._cvrProbBeatBaseline != rhs_storage._cvrProbBeatBaseline {return false}
        if _storage._cvrProb != rhs_storage._cvrProb {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
