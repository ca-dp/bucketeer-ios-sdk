//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: proto/eventcounter/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Bucketeer_Eventcounter_EventCounterServiceClient, then call methods of this protocol to make API calls.
internal protocol Bucketeer_Eventcounter_EventCounterServiceClientProtocol: GRPCClient {
  func getEvaluationCount(
    _ request: Bucketeer_Eventcounter_GetEvaluationCountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bucketeer_Eventcounter_GetEvaluationCountRequest, Bucketeer_Eventcounter_GetEvaluationCountResponse>

  func listExperimentCounts(
    _ request: Bucketeer_Eventcounter_ListExperimentCountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bucketeer_Eventcounter_ListExperimentCountsRequest, Bucketeer_Eventcounter_ListExperimentCountsResponse>

  func getExperimentResult(
    _ request: Bucketeer_Eventcounter_GetExperimentResultRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bucketeer_Eventcounter_GetExperimentResultRequest, Bucketeer_Eventcounter_GetExperimentResultResponse>

  func listExperimentResults(
    _ request: Bucketeer_Eventcounter_ListExperimentResultsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bucketeer_Eventcounter_ListExperimentResultsRequest, Bucketeer_Eventcounter_ListExperimentResultsResponse>

}

extension Bucketeer_Eventcounter_EventCounterServiceClientProtocol {

  /// Unary call to GetEvaluationCount
  ///
  /// - Parameters:
  ///   - request: Request to send to GetEvaluationCount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getEvaluationCount(
    _ request: Bucketeer_Eventcounter_GetEvaluationCountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bucketeer_Eventcounter_GetEvaluationCountRequest, Bucketeer_Eventcounter_GetEvaluationCountResponse> {
    return self.makeUnaryCall(
      path: "/bucketeer.eventcounter.EventCounterService/GetEvaluationCount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to ListExperimentCounts
  ///
  /// - Parameters:
  ///   - request: Request to send to ListExperimentCounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listExperimentCounts(
    _ request: Bucketeer_Eventcounter_ListExperimentCountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bucketeer_Eventcounter_ListExperimentCountsRequest, Bucketeer_Eventcounter_ListExperimentCountsResponse> {
    return self.makeUnaryCall(
      path: "/bucketeer.eventcounter.EventCounterService/ListExperimentCounts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to GetExperimentResult
  ///
  /// - Parameters:
  ///   - request: Request to send to GetExperimentResult.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getExperimentResult(
    _ request: Bucketeer_Eventcounter_GetExperimentResultRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bucketeer_Eventcounter_GetExperimentResultRequest, Bucketeer_Eventcounter_GetExperimentResultResponse> {
    return self.makeUnaryCall(
      path: "/bucketeer.eventcounter.EventCounterService/GetExperimentResult",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to ListExperimentResults
  ///
  /// - Parameters:
  ///   - request: Request to send to ListExperimentResults.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listExperimentResults(
    _ request: Bucketeer_Eventcounter_ListExperimentResultsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bucketeer_Eventcounter_ListExperimentResultsRequest, Bucketeer_Eventcounter_ListExperimentResultsResponse> {
    return self.makeUnaryCall(
      path: "/bucketeer.eventcounter.EventCounterService/ListExperimentResults",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class Bucketeer_Eventcounter_EventCounterServiceClient: Bucketeer_Eventcounter_EventCounterServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the bucketeer.eventcounter.EventCounterService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

