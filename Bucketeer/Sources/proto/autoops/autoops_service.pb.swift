// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/autoops/service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Autoops_GetAutoOpsRuleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var environmentNamespace: String = String()

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Autoops_GetAutoOpsRuleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var autoOpsRule: Bucketeer_Autoops_AutoOpsRule {
    get {return _autoOpsRule ?? Bucketeer_Autoops_AutoOpsRule()}
    set {_autoOpsRule = newValue}
  }
  /// Returns true if `autoOpsRule` has been explicitly set.
  var hasAutoOpsRule: Bool {return self._autoOpsRule != nil}
  /// Clears the value of `autoOpsRule`. Subsequent reads from it will return its default value.
  mutating func clearAutoOpsRule() {self._autoOpsRule = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _autoOpsRule: Bucketeer_Autoops_AutoOpsRule? = nil
}

struct Bucketeer_Autoops_CreateAutoOpsRuleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var environmentNamespace: String = String()

  var command: Bucketeer_Autoops_CreateAutoOpsRuleCommand {
    get {return _command ?? Bucketeer_Autoops_CreateAutoOpsRuleCommand()}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  mutating func clearCommand() {self._command = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _command: Bucketeer_Autoops_CreateAutoOpsRuleCommand? = nil
}

struct Bucketeer_Autoops_CreateAutoOpsRuleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Autoops_ListAutoOpsRulesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var environmentNamespace: String = String()

  var pageSize: Int64 = 0

  var cursor: String = String()

  var featureIds: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Autoops_ListAutoOpsRulesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var autoOpsRules: [Bucketeer_Autoops_AutoOpsRule] = []

  var cursor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Autoops_DeleteAutoOpsRuleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var environmentNamespace: String = String()

  var id: String = String()

  var command: Bucketeer_Autoops_DeleteAutoOpsRuleCommand {
    get {return _command ?? Bucketeer_Autoops_DeleteAutoOpsRuleCommand()}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  mutating func clearCommand() {self._command = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _command: Bucketeer_Autoops_DeleteAutoOpsRuleCommand? = nil
}

struct Bucketeer_Autoops_DeleteAutoOpsRuleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Autoops_UpdateAutoOpsRuleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var environmentNamespace: String = String()

  var id: String = String()

  var changeAutoOpsRuleOpsTypeCommand: Bucketeer_Autoops_ChangeAutoOpsRuleOpsTypeCommand {
    get {return _changeAutoOpsRuleOpsTypeCommand ?? Bucketeer_Autoops_ChangeAutoOpsRuleOpsTypeCommand()}
    set {_changeAutoOpsRuleOpsTypeCommand = newValue}
  }
  /// Returns true if `changeAutoOpsRuleOpsTypeCommand` has been explicitly set.
  var hasChangeAutoOpsRuleOpsTypeCommand: Bool {return self._changeAutoOpsRuleOpsTypeCommand != nil}
  /// Clears the value of `changeAutoOpsRuleOpsTypeCommand`. Subsequent reads from it will return its default value.
  mutating func clearChangeAutoOpsRuleOpsTypeCommand() {self._changeAutoOpsRuleOpsTypeCommand = nil}

  var addOpsEventRateClauseCommands: [Bucketeer_Autoops_AddOpsEventRateClauseCommand] = []

  var changeOpsEventRateClauseCommands: [Bucketeer_Autoops_ChangeOpsEventRateClauseCommand] = []

  var deleteClauseCommands: [Bucketeer_Autoops_DeleteClauseCommand] = []

  var addDatetimeClauseCommands: [Bucketeer_Autoops_AddDatetimeClauseCommand] = []

  var changeDatetimeClauseCommands: [Bucketeer_Autoops_ChangeDatetimeClauseCommand] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _changeAutoOpsRuleOpsTypeCommand: Bucketeer_Autoops_ChangeAutoOpsRuleOpsTypeCommand? = nil
}

struct Bucketeer_Autoops_UpdateAutoOpsRuleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bucketeer_Autoops_ExecuteAutoOpsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var environmentNamespace: String = String()

  var id: String = String()

  var changeAutoOpsRuleTriggeredAtCommand: Bucketeer_Autoops_ChangeAutoOpsRuleTriggeredAtCommand {
    get {return _changeAutoOpsRuleTriggeredAtCommand ?? Bucketeer_Autoops_ChangeAutoOpsRuleTriggeredAtCommand()}
    set {_changeAutoOpsRuleTriggeredAtCommand = newValue}
  }
  /// Returns true if `changeAutoOpsRuleTriggeredAtCommand` has been explicitly set.
  var hasChangeAutoOpsRuleTriggeredAtCommand: Bool {return self._changeAutoOpsRuleTriggeredAtCommand != nil}
  /// Clears the value of `changeAutoOpsRuleTriggeredAtCommand`. Subsequent reads from it will return its default value.
  mutating func clearChangeAutoOpsRuleTriggeredAtCommand() {self._changeAutoOpsRuleTriggeredAtCommand = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _changeAutoOpsRuleTriggeredAtCommand: Bucketeer_Autoops_ChangeAutoOpsRuleTriggeredAtCommand? = nil
}

struct Bucketeer_Autoops_ExecuteAutoOpsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var alreadyTriggered: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.autoops"

extension Bucketeer_Autoops_GetAutoOpsRuleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAutoOpsRuleRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_namespace"),
    2: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Autoops_GetAutoOpsRuleRequest, rhs: Bucketeer_Autoops_GetAutoOpsRuleRequest) -> Bool {
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Autoops_GetAutoOpsRuleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAutoOpsRuleResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "auto_ops_rule"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._autoOpsRule)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._autoOpsRule {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Autoops_GetAutoOpsRuleResponse, rhs: Bucketeer_Autoops_GetAutoOpsRuleResponse) -> Bool {
    if lhs._autoOpsRule != rhs._autoOpsRule {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Autoops_CreateAutoOpsRuleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateAutoOpsRuleRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_namespace"),
    2: .same(proto: "command"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 2: try decoder.decodeSingularMessageField(value: &self._command)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 1)
    }
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Autoops_CreateAutoOpsRuleRequest, rhs: Bucketeer_Autoops_CreateAutoOpsRuleRequest) -> Bool {
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs._command != rhs._command {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Autoops_CreateAutoOpsRuleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateAutoOpsRuleResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Autoops_CreateAutoOpsRuleResponse, rhs: Bucketeer_Autoops_CreateAutoOpsRuleResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Autoops_ListAutoOpsRulesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListAutoOpsRulesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_namespace"),
    2: .standard(proto: "page_size"),
    3: .same(proto: "cursor"),
    4: .standard(proto: "feature_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 2: try decoder.decodeSingularInt64Field(value: &self.pageSize)
      case 3: try decoder.decodeSingularStringField(value: &self.cursor)
      case 4: try decoder.decodeRepeatedStringField(value: &self.featureIds)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt64Field(value: self.pageSize, fieldNumber: 2)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 3)
    }
    if !self.featureIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.featureIds, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Autoops_ListAutoOpsRulesRequest, rhs: Bucketeer_Autoops_ListAutoOpsRulesRequest) -> Bool {
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.featureIds != rhs.featureIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Autoops_ListAutoOpsRulesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListAutoOpsRulesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "auto_ops_rules"),
    2: .same(proto: "cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.autoOpsRules)
      case 2: try decoder.decodeSingularStringField(value: &self.cursor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.autoOpsRules.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.autoOpsRules, fieldNumber: 1)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Autoops_ListAutoOpsRulesResponse, rhs: Bucketeer_Autoops_ListAutoOpsRulesResponse) -> Bool {
    if lhs.autoOpsRules != rhs.autoOpsRules {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Autoops_DeleteAutoOpsRuleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteAutoOpsRuleRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_namespace"),
    2: .same(proto: "id"),
    3: .same(proto: "command"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularMessageField(value: &self._command)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Autoops_DeleteAutoOpsRuleRequest, rhs: Bucketeer_Autoops_DeleteAutoOpsRuleRequest) -> Bool {
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.id != rhs.id {return false}
    if lhs._command != rhs._command {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Autoops_DeleteAutoOpsRuleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteAutoOpsRuleResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Autoops_DeleteAutoOpsRuleResponse, rhs: Bucketeer_Autoops_DeleteAutoOpsRuleResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Autoops_UpdateAutoOpsRuleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateAutoOpsRuleRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_namespace"),
    2: .same(proto: "id"),
    3: .standard(proto: "change_auto_ops_rule_ops_type_command"),
    4: .standard(proto: "add_ops_event_rate_clause_commands"),
    5: .standard(proto: "change_ops_event_rate_clause_commands"),
    6: .standard(proto: "delete_clause_commands"),
    7: .standard(proto: "add_datetime_clause_commands"),
    8: .standard(proto: "change_datetime_clause_commands"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularMessageField(value: &self._changeAutoOpsRuleOpsTypeCommand)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.addOpsEventRateClauseCommands)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.changeOpsEventRateClauseCommands)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.deleteClauseCommands)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.addDatetimeClauseCommands)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.changeDatetimeClauseCommands)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if let v = self._changeAutoOpsRuleOpsTypeCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.addOpsEventRateClauseCommands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addOpsEventRateClauseCommands, fieldNumber: 4)
    }
    if !self.changeOpsEventRateClauseCommands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.changeOpsEventRateClauseCommands, fieldNumber: 5)
    }
    if !self.deleteClauseCommands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deleteClauseCommands, fieldNumber: 6)
    }
    if !self.addDatetimeClauseCommands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addDatetimeClauseCommands, fieldNumber: 7)
    }
    if !self.changeDatetimeClauseCommands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.changeDatetimeClauseCommands, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Autoops_UpdateAutoOpsRuleRequest, rhs: Bucketeer_Autoops_UpdateAutoOpsRuleRequest) -> Bool {
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.id != rhs.id {return false}
    if lhs._changeAutoOpsRuleOpsTypeCommand != rhs._changeAutoOpsRuleOpsTypeCommand {return false}
    if lhs.addOpsEventRateClauseCommands != rhs.addOpsEventRateClauseCommands {return false}
    if lhs.changeOpsEventRateClauseCommands != rhs.changeOpsEventRateClauseCommands {return false}
    if lhs.deleteClauseCommands != rhs.deleteClauseCommands {return false}
    if lhs.addDatetimeClauseCommands != rhs.addDatetimeClauseCommands {return false}
    if lhs.changeDatetimeClauseCommands != rhs.changeDatetimeClauseCommands {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Autoops_UpdateAutoOpsRuleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateAutoOpsRuleResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Autoops_UpdateAutoOpsRuleResponse, rhs: Bucketeer_Autoops_UpdateAutoOpsRuleResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Autoops_ExecuteAutoOpsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExecuteAutoOpsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "environment_namespace"),
    2: .same(proto: "id"),
    3: .standard(proto: "change_auto_ops_rule_triggered_at_command"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.environmentNamespace)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularMessageField(value: &self._changeAutoOpsRuleTriggeredAtCommand)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.environmentNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.environmentNamespace, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if let v = self._changeAutoOpsRuleTriggeredAtCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Autoops_ExecuteAutoOpsRequest, rhs: Bucketeer_Autoops_ExecuteAutoOpsRequest) -> Bool {
    if lhs.environmentNamespace != rhs.environmentNamespace {return false}
    if lhs.id != rhs.id {return false}
    if lhs._changeAutoOpsRuleTriggeredAtCommand != rhs._changeAutoOpsRuleTriggeredAtCommand {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Autoops_ExecuteAutoOpsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExecuteAutoOpsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "already_triggered"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.alreadyTriggered)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.alreadyTriggered != false {
      try visitor.visitSingularBoolField(value: self.alreadyTriggered, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Autoops_ExecuteAutoOpsResponse, rhs: Bucketeer_Autoops_ExecuteAutoOpsResponse) -> Bool {
    if lhs.alreadyTriggered != rhs.alreadyTriggered {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
