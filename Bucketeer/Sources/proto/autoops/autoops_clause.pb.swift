// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/autoops/clause.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bucketeer_Autoops_Clause {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var clause: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._clause ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._clause = newValue}
  }
  /// Returns true if `clause` has been explicitly set.
  var hasClause: Bool {return _storage._clause != nil}
  /// Clears the value of `clause`. Subsequent reads from it will return its default value.
  mutating func clearClause() {_uniqueStorage()._clause = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bucketeer_Autoops_OpsEventRateClause {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var featureVersion: Int32 = 0

  var variationID: String = String()

  var goalID: String = String()

  var minCount: Int64 = 0

  var threadsholdRate: Double = 0

  var `operator`: Bucketeer_Autoops_OpsEventRateClause.Operator = .greaterOrEqual

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Operator: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case greaterOrEqual // = 0
    case lessOrEqual // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .greaterOrEqual
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .greaterOrEqual
      case 1: self = .lessOrEqual
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .greaterOrEqual: return 0
      case .lessOrEqual: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Bucketeer_Autoops_OpsEventRateClause.Operator: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bucketeer_Autoops_OpsEventRateClause.Operator] = [
    .greaterOrEqual,
    .lessOrEqual,
  ]
}

#endif  // swift(>=4.2)

struct Bucketeer_Autoops_DatetimeClause {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var time: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bucketeer.autoops"

extension Bucketeer_Autoops_Clause: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Clause"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "clause"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _clause: SwiftProtobuf.Google_Protobuf_Any? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _clause = source._clause
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._clause)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._clause {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Autoops_Clause, rhs: Bucketeer_Autoops_Clause) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._clause != rhs_storage._clause {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Autoops_OpsEventRateClause: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OpsEventRateClause"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_version"),
    2: .standard(proto: "variation_id"),
    3: .standard(proto: "goal_id"),
    4: .standard(proto: "min_count"),
    5: .standard(proto: "threadshold_rate"),
    6: .same(proto: "operator"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.featureVersion)
      case 2: try decoder.decodeSingularStringField(value: &self.variationID)
      case 3: try decoder.decodeSingularStringField(value: &self.goalID)
      case 4: try decoder.decodeSingularInt64Field(value: &self.minCount)
      case 5: try decoder.decodeSingularDoubleField(value: &self.threadsholdRate)
      case 6: try decoder.decodeSingularEnumField(value: &self.`operator`)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.featureVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.featureVersion, fieldNumber: 1)
    }
    if !self.variationID.isEmpty {
      try visitor.visitSingularStringField(value: self.variationID, fieldNumber: 2)
    }
    if !self.goalID.isEmpty {
      try visitor.visitSingularStringField(value: self.goalID, fieldNumber: 3)
    }
    if self.minCount != 0 {
      try visitor.visitSingularInt64Field(value: self.minCount, fieldNumber: 4)
    }
    if self.threadsholdRate != 0 {
      try visitor.visitSingularDoubleField(value: self.threadsholdRate, fieldNumber: 5)
    }
    if self.`operator` != .greaterOrEqual {
      try visitor.visitSingularEnumField(value: self.`operator`, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Autoops_OpsEventRateClause, rhs: Bucketeer_Autoops_OpsEventRateClause) -> Bool {
    if lhs.featureVersion != rhs.featureVersion {return false}
    if lhs.variationID != rhs.variationID {return false}
    if lhs.goalID != rhs.goalID {return false}
    if lhs.minCount != rhs.minCount {return false}
    if lhs.threadsholdRate != rhs.threadsholdRate {return false}
    if lhs.`operator` != rhs.`operator` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bucketeer_Autoops_OpsEventRateClause.Operator: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GREATER_OR_EQUAL"),
    1: .same(proto: "LESS_OR_EQUAL"),
  ]
}

extension Bucketeer_Autoops_DatetimeClause: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DatetimeClause"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.time)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bucketeer_Autoops_DatetimeClause, rhs: Bucketeer_Autoops_DatetimeClause) -> Bool {
    if lhs.time != rhs.time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
